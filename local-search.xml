<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>你为什么不谈恋爱？</title>
    <link href="/2024/03/10/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%B0%88%E6%81%8B%E7%88%B1%EF%BC%9F/"/>
    <url>/2024/03/10/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%B0%88%E6%81%8B%E7%88%B1%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="你为什么不谈恋爱？"><a href="#你为什么不谈恋爱？" class="headerlink" title="你为什么不谈恋爱？"></a>你为什么不谈恋爱？</h1><blockquote><p>版权声明：本文为知乎作者<a href="https://www.zhihu.com/people/94-17-82-86">苏格拉底没有底</a>原创文章，版权归属原作者，如果侵权，请联系我们删除！</p><p>作者：苏格拉没有底<br>链接：<a href="https://www.zhihu.com/question/281437650/answer/3361833502">https://www.zhihu.com/question/281437650/answer/3361833502</a><br>来源：知乎</p></blockquote><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>两袖清风，一身清贫。外无潘安卫阶之貌，内无石崇不韦之富。英雄起于草莽，而未有尺寸之功。自惭形秽，特立独行。无名显著于世，无才显露于人。不曾交涉广泛，亦无口齿之利。虽自负于胸藏韬略，亦慕淮阴子建之能。然多遭坎坷，饱尝世事艰辛。昔见笑于众女，讥我容貌之丑陋。如效颦之东施，胜齐国之无盐。后被耻于言行，讽我情商之低下。若歌辇之楚狂人，似投江之屈原。忍尤攘诟，闻过则改。休学业以养身心，腹诗书而气自华。敛藏锋华，涵养本心。</p><p>虽慕相如、梁鸿之情满，实无求凰纳雁之意。且丈夫志在乘风破浪，岂求赌书泼茶之趣。况情浅不真，情深不寿。耽于此道，磨损身心。此间虽乐，令人难思蜀，然情过境迁，思之令人心烦。从前恩爱种种，今朝鸿雁分飞。若如初见，沧海巫云。依昔亲密无间，此后陌路难逢。明皇贵妃之誓，终成马嵬坡下之魂。成帝班妃之爱，难抵深宫团扇之悲。金屋藏娇，不过儿时戏言；《长门赋》成，难挽帝王之心。故剑情深，独留悲伤之人；金谷事悲，花犹坠楼之人。十年生死，阴阳相隔；月挂疏桐，沙洲寂冷。易安情满，共赏金印之乐。渡江失夫，身如黄花憔悴；放翁悦婚，与妻青梅竹马。难违母命，常思惊鸿之影。相思无益，徒惹人瘦衣宽；未妨惆怅，空余身疲心凉。</p><p>况大学求爱，少情多欲，去真求伪。未知良人之难求，而贪一时之欢乐。不求情真如蒲苇，但念片刻之欢娱。喜赴巫山云雨之会，乐从耳目口腹之欲。不思学业之进展，独爱伴侣之眷恋。且夫多重于金玉之外，未知其败絮之内。喜于口舌之誓，不求真心之言。温存令人流连，相处乐于忘返。如桃源之渔夫，喜虚构之世界。似烂柯之王质，忘世事之变迁。且喜新厌旧，人之常情也。后来者居上，而旧爱者沦亡。移情别恋，怨从爱生，纠缠不休，苦不堪言。人无远虑，必有近忧。在校思学业，毕业思工作。种种忧虑，岂求相爱？</p><p>人之大事，在孝与志。上愿承父母膝下之乐，下欲建高祖太宗之业。年已二十，志比天高。自强不息，厚德载物。身有鸿鹄之志，心有鲲鹏之愿。潜龙卧渊，凤凰待枝。自比于国士无双，而时人未识也。一朝腾跃而起，翱翔四海之内。故饱览经书，学于四海。通天达地，学贯中西。著书立说，经世致用。如此，大丈夫何患无妻？不求于大学，而以才学求之邦国也。</p>]]></content>
    
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言算法赛——蓝桥杯（省赛试题）</title>
    <link href="/2024/02/27/C%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E8%B5%9B%E2%80%94%E2%80%94%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%88%E7%9C%81%E8%B5%9B%E8%AF%95%E9%A2%98%EF%BC%89/"/>
    <url>/2024/02/27/C%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E8%B5%9B%E2%80%94%E2%80%94%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%88%E7%9C%81%E8%B5%9B%E8%AF%95%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言算法赛——蓝桥杯（省赛试题）"><a href="#C语言算法赛——蓝桥杯（省赛试题）" class="headerlink" title="C语言算法赛——蓝桥杯（省赛试题）"></a>C语言算法赛——蓝桥杯（省赛试题）</h1><blockquote><p>版权声明：本文为博主<a href="https://blog.csdn.net/weixin_56641478">作者：慢了半拍i</a>原创文章，版权归属原作者，如果侵权，请联系我们删除！</p><p>原文链接：<a href="https://blog.csdn.net/weixin_56641478/article/details/135726057">https://blog.csdn.net/weixin_56641478/article/details/135726057</a></p></blockquote><h2 id="一、十四届C-C-程序设计C组试题"><a href="#一、十四届C-C-程序设计C组试题" class="headerlink" title="一、十四届C&#x2F;C++程序设计C组试题"></a>一、十四届C&#x2F;C++程序设计C组试题</h2><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/28a2c887-dda4-475c-8fda-373bded07194.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp">十四届程序C组试题A<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">20230408</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 累加从1到n的所有整数</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        sum += i;<br>    &#125;<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/a90ae47f-58fa-44d6-b03c-d22c0cb686d9.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//十四届程序C组试题B</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-comment">// 时间字符串解析为结构体 tm</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">parseTime</span><span class="hljs-params">(<span class="hljs-type">char</span>* timeString, <span class="hljs-keyword">struct</span> tm* timeStruct)</span> </span>&#123;<br>    <span class="hljs-built_in">sscanf</span>(timeString, <span class="hljs-string">&quot;%d-%d-%d %d:%d:%d&quot;</span>,<br>        &amp;timeStruct-&gt;tm_year, &amp;timeStruct-&gt;tm_mon, &amp;timeStruct-&gt;tm_mday,<br>        &amp;timeStruct-&gt;tm_hour, &amp;timeStruct-&gt;tm_min, &amp;timeStruct-&gt;tm_sec);<br><br>    <span class="hljs-comment">// tm_year表示的是自1900年以来的年数，需要减去1900</span><br>    timeStruct-&gt;tm_year -= <span class="hljs-number">1900</span>;<br>    <span class="hljs-comment">// tm_mon表示的是0-11的月份，需要减去1</span><br>    timeStruct-&gt;tm_mon -= <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 每一对相邻的上下班打卡之间的时间差</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculateTimeDifference</span><span class="hljs-params">(<span class="hljs-type">char</span>* time1, <span class="hljs-type">char</span>* time2)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tm</span> start, end;<br><br>    <span class="hljs-comment">// 解析时间字符串为结构体 tm</span><br>    <span class="hljs-built_in">parseTime</span>(time1, &amp;start);<br>    <span class="hljs-built_in">parseTime</span>(time2, &amp;end);<br><br>    <span class="hljs-comment">// 使用 mktime 将 tm 结构体转换为时间戳</span><br>    <span class="hljs-type">time_t</span> startTime = <span class="hljs-built_in">mktime</span>(&amp;start);<br>    <span class="hljs-type">time_t</span> endTime = <span class="hljs-built_in">mktime</span>(&amp;end);<br><br>    <span class="hljs-comment">// 计算时间差</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">difftime</span>(endTime, startTime);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 打卡记录数组</span><br>    <span class="hljs-type">char</span>* punchRecords[] = &#123;<br>        <span class="hljs-string">&quot;2022-01-01 07:58:02&quot;</span>,<br>        <span class="hljs-string">&quot;2022-01-01 12:00:05&quot;</span>,<br>        <span class="hljs-string">&quot;2022-01-01 16:01:35&quot;</span>,<br>        <span class="hljs-string">&quot;2022-01-02 00:20:05&quot;</span><br>    &#125;;<br><br>    <span class="hljs-type">int</span> numRecords = <span class="hljs-built_in">sizeof</span>(punchRecords) / <span class="hljs-built_in">sizeof</span>(punchRecords[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-comment">// 按照时间顺序对打卡记录进行排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numRecords - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numRecords - i - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(punchRecords[j], punchRecords[j + <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 交换记录</span><br>                <span class="hljs-type">char</span>* temp = punchRecords[j];<br>                punchRecords[j] = punchRecords[j + <span class="hljs-number">1</span>];<br>                punchRecords[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算总工作时长</span><br>    <span class="hljs-type">int</span> totalWorkDuration = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numRecords - <span class="hljs-number">1</span>; i += <span class="hljs-number">2</span>) &#123;<br>        totalWorkDuration += <span class="hljs-built_in">calculateTimeDifference</span>(punchRecords[i], punchRecords[i + <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// 输出总工作时长</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小蓝在2022年度的总工作时长是%d秒。\n&quot;</span>, totalWorkDuration);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/e4102ba9-936d-41e8-b74a-9087fd4246f7.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp">十四届程序C组试题C<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n; <span class="hljs-comment">// 事件数量</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-type">int</span> A[n], B[n], C[n]; <span class="hljs-comment">// 存储每个事件中的A、B、C值</span><br>    <span class="hljs-type">int</span> maxEvents = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 最多发生的事件数量</span><br>    <span class="hljs-type">int</span> X = <span class="hljs-number">0</span>, Y = <span class="hljs-number">0</span>, Z = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始士兵数量</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;A[i], &amp;B[i], &amp;C[i]);<br><br>        <span class="hljs-comment">// 计算每个国家的士兵数量</span><br>        X += A[i];<br>        Y += B[i];<br>        Z += C[i];<br><br>        <span class="hljs-comment">// 判断是否有国家获胜</span><br>        <span class="hljs-keyword">if</span> ((X &gt; Y + Z) || (Y &gt; X + Z) || (Z &gt; X + Y)) &#123;<br>            <span class="hljs-comment">// 更新最多发生的事件数量</span><br>            maxEvents = i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxEvents);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/2ac5ee93-c7eb-463e-a90f-9da9223c0d92.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximize_substrings</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i, n;<br><br>    <span class="hljs-comment">// 遍历字符串，从第二个字符开始</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; ++i)<br>    &#123;<br>        <span class="hljs-comment">// 如果当前位置是&#x27;?&#x27;，则尽量使其与前一个字符不同</span><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br>            s[i] = (s[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 计算互不重叠的00和11子串的个数</span><br>        <span class="hljs-keyword">if</span> (s[i] == s[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            count += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> input_str[] = <span class="hljs-string">&quot;1?0?1&quot;</span>;<br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">maximize_substrings</span>(input_str);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;互不重叠的00和11子串个数：%d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/8fc92f7b-2bcc-4167-a97a-1a3e48e816e1.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 函数：计算最小翻转次数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min_flips_to_match</span><span class="hljs-params">(<span class="hljs-type">char</span> S[], <span class="hljs-type">char</span> T[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(S);<br>    <span class="hljs-type">int</span> flips = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 从第二个位置到倒数第二个位置进行遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-comment">// 如果当前位置的字符与目标串不同</span><br>        <span class="hljs-keyword">if</span> (S[i] != T[i])<br>        &#123;<br>            <span class="hljs-comment">// 进行翻转操作</span><br>            flips++;<br>            S[i] = T[i];<br>            S[i + <span class="hljs-number">1</span>] = (S[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) ? <span class="hljs-string">&#x27;1&#x27;</span> : <span class="hljs-string">&#x27;0&#x27;</span>;<br>            S[i + <span class="hljs-number">2</span>] = (S[i + <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) ? <span class="hljs-string">&#x27;1&#x27;</span> : <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> flips;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 示例输入</span><br>    <span class="hljs-type">char</span> S[] = <span class="hljs-string">&quot;01010&quot;</span>;<br>    <span class="hljs-type">char</span> T[] = <span class="hljs-string">&quot;00000&quot;</span>;<br><br>    <span class="hljs-comment">// 计算最小翻转次数</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">min_flips_to_match</span>(S, T);<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Minimum flips required: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/bf2ebf29-399d-4102-b26e-1e9be3c12834.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOD 998244353</span><br><br><span class="hljs-comment">// 函数：计算矩阵子矩阵价值的和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">matrixSubmatrixSum</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> matrix[n][m])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 预处理，计算每个位置的最大值和最小值</span><br>    <span class="hljs-type">int</span> maxVal[n][m];<br>    <span class="hljs-type">int</span> minVal[n][m];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                maxVal[i][j] = (maxVal[i][j] &gt; maxVal[i - <span class="hljs-number">1</span>][j]) ? maxVal[i][j] : maxVal[i - <span class="hljs-number">1</span>][j];<br>                minVal[i][j] = (minVal[i][j] &lt; minVal[i - <span class="hljs-number">1</span>][j]) ? minVal[i][j] : minVal[i - <span class="hljs-number">1</span>][j];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                maxVal[i][j] = (maxVal[i][j] &gt; maxVal[i][j - <span class="hljs-number">1</span>]) ? maxVal[i][j] : maxVal[i][j - <span class="hljs-number">1</span>];<br>                minVal[i][j] = (minVal[i][j] &lt; minVal[i][j - <span class="hljs-number">1</span>]) ? minVal[i][j] : minVal[i][j - <span class="hljs-number">1</span>];<br>            &#125;<br>            maxVal[i][j] = (maxVal[i][j] &gt; matrix[i][j]) ? maxVal[i][j] : matrix[i][j];<br>            minVal[i][j] = (minVal[i][j] &lt; matrix[i][j]) ? minVal[i][j] : matrix[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算答案</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>; a &lt;= n; ++a)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">1</span>; b &lt;= m; ++b)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i + a - <span class="hljs-number">1</span> &lt; n; ++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j + b - <span class="hljs-number">1</span> &lt; m; ++j)<br>                &#123;<br>                    <span class="hljs-type">int</span> maxInSubmatrix = maxVal[i + a - <span class="hljs-number">1</span>][j + b - <span class="hljs-number">1</span>];<br>                    <span class="hljs-type">int</span> minInSubmatrix = minVal[i + a - <span class="hljs-number">1</span>][j + b - <span class="hljs-number">1</span>];<br>                    result = (result + ((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxInSubmatrix * minInSubmatrix) % MOD) % MOD;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 示例输入</span><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">3</span>, m = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> matrix[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] =&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;&#125;;<br><br>    <span class="hljs-comment">// 计算答案</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">matrixSubmatrixSum</span>(n, m, matrix);<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum of submatrix values: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p> <img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/bf5cc606-0f49-4dc9-8572-9fc5dcab6a0f.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOD 998244353</span><br><br><span class="hljs-comment">// 计算欧拉函数</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> p = <span class="hljs-number">2</span>; p * p &lt;= n; ++p) &#123;<br>        <span class="hljs-keyword">if</span> (n % p == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">while</span> (n % p == <span class="hljs-number">0</span>)<br>                n /= p;<br>            result -= result / p;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>        result -= result / n;<br>    <span class="hljs-keyword">return</span> result % MOD;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>, &amp;a, &amp;b);<br><br>    <span class="hljs-comment">// 计算欧拉函数</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> euler_a = <span class="hljs-built_in">phi</span>(a);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> euler_ab = <span class="hljs-built_in">phi</span>((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-built_in">pow</span>(a, b));<br><br>    <span class="hljs-comment">// 输出结果对MOD取模的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (euler_ab - euler_a + MOD) % MOD);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/e736a667-2239-41c0-905a-4b72f4ef2ea7.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(a, b) ((a) &gt; (b) ? (a) : (b))</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max_xor_difference</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> prefix_xor_left[<span class="hljs-number">100000</span>];<br>    <span class="hljs-type">int</span> prefix_xor_right[<span class="hljs-number">100000</span>];<br><br>    <span class="hljs-comment">// 计算从左往右的前缀异或和</span><br>    prefix_xor_left[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        prefix_xor_left[i] = prefix_xor_left[i - <span class="hljs-number">1</span>] ^ arr[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 计算从右往左的前缀异或和</span><br>    prefix_xor_right[n - <span class="hljs-number">1</span>] = arr[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        prefix_xor_right[i] = prefix_xor_right[i + <span class="hljs-number">1</span>] ^ arr[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 计算两个不相交子段内数的异或和的差值的最大值</span><br>    <span class="hljs-type">int</span> max_difference = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        max_difference = <span class="hljs-built_in">max</span>(max_difference, <span class="hljs-built_in">max</span>(prefix_xor_left[i], prefix_xor_right[i + <span class="hljs-number">1</span>]));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> max_difference;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the number of elements in the array: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">100000</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the array elements: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">max_xor_difference</span>(arr, n);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Maximum XOR difference of two non-overlapping subarrays: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/817a6553-26fb-400b-af96-5d4b92adfb34.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (b != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> temp = b;<br>        b = a % b;<br>        a = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">find_numbers</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i_min = <span class="hljs-number">-1</span>, j_min = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">gcd</span>(arr[i], arr[j]) &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (i_min == <span class="hljs-number">-1</span> || i &lt; i_min || (i == i_min &amp;&amp; j &lt; j_min)) &#123;<br>                    i_min = i;<br>                    j_min = j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (i_min == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No such pair found.\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pair with minimum i and j: (%d, %d)\n&quot;</span>, i_min + <span class="hljs-number">1</span>, j_min + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the number of elements in the array: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the array elements: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">find_numbers</span>(arr, n);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/57a3b4e2-4361-4f43-a085-07f70017df56.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">calculate_subtree_size</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k)</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> subtree_size = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 计算当前结点的深度</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> depth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>        k = (k - <span class="hljs-number">1</span>) / m;<br>        depth++;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算子树的结点数量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = depth - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        subtree_size = subtree_size * m + i;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> subtree_size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the degree of the tree (m): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the node number (k): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;k);<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">calculate_subtree_size</span>(m, k);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of nodes in the subtree corresponding to node %lld: %lld\n&quot;</span>, k, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><h2 id="二、十四届C-C-程序设计B组试题"><a href="#二、十四届C-C-程序设计B组试题" class="headerlink" title="二、十四届C&#x2F;C++程序设计B组试题"></a>二、十四届C&#x2F;C++程序设计B组试题</h2><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/8f798c1f-5df4-4bc9-af81-7f9a475ce73f.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> array[] = <span class="hljs-string">&quot;5686916124919823647759503875815861830379270588570991944686338516346707827689565614010094809128502533&quot;</span>;<br>    <span class="hljs-type">int</span> arraySize = <span class="hljs-built_in">strlen</span>(array);<br>    <span class="hljs-type">char</span> date[<span class="hljs-number">9</span>];  <span class="hljs-comment">// 存储提取的8位子序列</span><br>    <span class="hljs-type">int</span> uniqueDates = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 记录不同日期数量</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= arraySize - <span class="hljs-number">8</span>; ++i) &#123;<br>        <span class="hljs-comment">// 提取8位子序列</span><br>        <span class="hljs-built_in">strncpy</span>(date, array + i, <span class="hljs-number">8</span>);<br>        date[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;  <span class="hljs-comment">// 添加字符串结束符</span><br><br>        <span class="hljs-comment">// 解析日期</span><br>        <span class="hljs-type">int</span> year, month, day;<br>        <span class="hljs-built_in">sscanf</span>(date, <span class="hljs-string">&quot;%4d%2d%2d&quot;</span>, &amp;year, &amp;month, &amp;day);<br><br>        <span class="hljs-comment">// 检查是否为2023年的合法日期</span><br>        <span class="hljs-keyword">if</span> (year == <span class="hljs-number">2023</span> &amp;&amp; month &gt;= <span class="hljs-number">1</span> &amp;&amp; month &lt;= <span class="hljs-number">12</span> &amp;&amp; day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">31</span>) &#123;<br>            <span class="hljs-comment">// 记录合法日期，并避免重复计数</span><br>            uniqueDates++;<br>            i += <span class="hljs-number">7</span>;  <span class="hljs-comment">// 移动到下一个可能的子序列的起始位置</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;满足条件的不同日期数量为：%d\n&quot;</span>, uniqueDates);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/c00470dc-4784-48a9-989c-3d2673dc7fb4.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-comment">// 定义信息熵函数</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">entropy_equation</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<br>    <span class="hljs-type">double</span> p0 = x / <span class="hljs-number">23333333</span>;<br>    <span class="hljs-type">double</span> p1 = (<span class="hljs-number">23333333</span> - x) / <span class="hljs-number">23333333</span>;<br>    <span class="hljs-type">double</span> entropy = -(p0 * <span class="hljs-built_in">log2</span>(p0) + p1 * <span class="hljs-built_in">log2</span>(p1));<br>    <span class="hljs-keyword">return</span> entropy - <span class="hljs-number">11625907.5798</span>;<br>&#125;<br><br><span class="hljs-comment">// 二分法求解方程</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">binary_search</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> low = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-type">double</span> high = <span class="hljs-number">23333333</span>;<br>    <span class="hljs-type">double</span> epsilon = <span class="hljs-number">0.000001</span>;  <span class="hljs-comment">// 精度要求</span><br><br>    <span class="hljs-keyword">while</span> (high - low &gt; epsilon) &#123;<br>        <span class="hljs-type">double</span> mid = (low + high) / <span class="hljs-number">2.0</span>;<br>        <span class="hljs-type">double</span> result = <span class="hljs-built_in">entropy_equation</span>(mid);<br><br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;<br>            high = mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> zero_count = <span class="hljs-built_in">binary_search</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 出现的次数为: %lf\n&quot;</span>, zero_count);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/14f7f219-82d5-4eca-a330-49a8c8e49a90.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 计算最大公约数的欧几里得算法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><br><span class="hljs-comment">// 计算数组中所有元素的最大公约数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findGCD</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> result = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        result = <span class="hljs-built_in">gcd</span>(result, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入冶炼记录的数量 N: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-type">int</span> A[n], B[n];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入每条记录中的 A 和 B：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;A[i], &amp;B[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 计算最小值</span><br>    <span class="hljs-type">int</span> minV = <span class="hljs-built_in">findGCD</span>(A, n);<br><br>    <span class="hljs-comment">// 计算最大值</span><br>    <span class="hljs-type">int</span> maxV = <span class="hljs-built_in">findGCD</span>(B, n);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;转换率V的最小值：%d\n&quot;</span>, minV);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;转换率V的最大值：%d\n&quot;</span>, maxV);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/a7311e35-dde8-489a-9092-ce2190f44d06.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 飞机结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Aircraft</span><br>&#123;<br>    <span class="hljs-type">int</span> arrivalTime;<br>    <span class="hljs-type">int</span> hoverTime;<br>    <span class="hljs-type">int</span> landingTime;<br>&#125;;<br><br><span class="hljs-comment">// 比较函数，用于排序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (((<span class="hljs-keyword">struct</span> Aircraft*)a)-&gt;arrivalTime + ((<span class="hljs-keyword">struct</span> Aircraft*)a)-&gt;hoverTime) -<br>        (((<span class="hljs-keyword">struct</span> Aircraft*)b)-&gt;arrivalTime + ((<span class="hljs-keyword">struct</span> Aircraft*)b)-&gt;hoverTime);<br>&#125;<br><br><span class="hljs-comment">// 判断是否可以全部安全降落的函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">canLand</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Aircraft aircraft[], <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">qsort</span>(aircraft, N, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Aircraft), compare);<br><br>    <span class="hljs-type">int</span> currentTime = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-comment">// 判断是否在时间窗口内降落</span><br>        <span class="hljs-keyword">if</span> (currentTime + aircraft[i].landingTime &gt; aircraft[i].arrivalTime + aircraft[i].hoverTime) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不能安全降落</span><br>        &#125;<br><br>        <span class="hljs-comment">// 更新当前时间</span><br>        currentTime = (currentTime + aircraft[i].landingTime &gt; aircraft[i].arrivalTime)<br>            ? currentTime + aircraft[i].landingTime<br>            : aircraft[i].arrivalTime;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 可以安全降落</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入飞机数量 N：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Aircraft</span>* aircraft = (<span class="hljs-keyword">struct</span> Aircraft*)<span class="hljs-built_in">malloc</span>(N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Aircraft));<br><br>    <span class="hljs-comment">// 输入飞机信息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入第 %d 架飞机的到达时刻、盘旋时间和降落时间：&quot;</span>, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;aircraft[i].arrivalTime, &amp;aircraft[i].hoverTime, &amp;aircraft[i].landingTime);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否可以全部安全降落</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">canLand</span>(aircraft, N))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;所有飞机可以全部安全降落。\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有飞机无法安全降落。\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(aircraft);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/4deda4c7-6b33-4d30-8328-383b53d02b03.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDeletionsForChain</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> dp[N];<br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        dp[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] % <span class="hljs-number">10</span> == arr[i] / <span class="hljs-number">10</span>) &#123;<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        result = <span class="hljs-built_in">max</span>(result, dp[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> N - result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入数列的长度 N：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br><br>    <span class="hljs-type">int</span> arr[N];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入数列 A1, A2, ..., AN：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> deletions = <span class="hljs-built_in">minDeletionsForChain</span>(arr, N);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最少需要删除 %d 个数，使剩下的序列是接龙序列。\n&quot;</span>, deletions);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/ca09cdeb-e817-4a6a-a586-3f4a9e36629a.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 5</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span> grid[ROW][COL], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= ROW || j &lt; <span class="hljs-number">0</span> || j &gt;= COL || grid[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    grid[i][j] = <span class="hljs-string">&#x27;0&#x27;</span>;  <span class="hljs-comment">// 标记当前格子为已访问</span><br><br>    <span class="hljs-comment">// 上下左右四个方向进行深度优先搜索</span><br>    <span class="hljs-built_in">dfs</span>(grid, i - <span class="hljs-number">1</span>, j);<br>    <span class="hljs-built_in">dfs</span>(grid, i + <span class="hljs-number">1</span>, j);<br>    <span class="hljs-built_in">dfs</span>(grid, i, j - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs</span>(grid, i, j + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-type">char</span> grid[ROW][COL])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ROW; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; COL; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                ++count;<br>                <span class="hljs-built_in">dfs</span>(grid, i, j);  <span class="hljs-comment">// 深度优先搜索标记当前岛屿</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> grid[ROW][COL] = &#123;<br>        &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">numIslands</span>(grid);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;岛屿数量: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/14af3cfc-ca89-4b75-941b-7cc6481b887b.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 计算以c1开头、以c2结尾的子串个数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countShortenedSubstrings</span><span class="hljs-params">(<span class="hljs-type">char</span> S[], <span class="hljs-type">char</span> c1, <span class="hljs-type">char</span> c2, <span class="hljs-type">int</span> K)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(S);<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (S[i] == c1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (S[j] == c2) &#123;<br>                    <span class="hljs-comment">// 计算子串长度</span><br>                    <span class="hljs-type">int</span> length = j - i + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (length &gt;= K) &#123;<br>                        <span class="hljs-comment">// 符合条件，计数器加一</span><br>                        count++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> S[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">char</span> c1, c2;<br>    <span class="hljs-type">int</span> K;<br><br>    <span class="hljs-comment">// 读取输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the string S: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, S);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the characters c1 and c2: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c %c&quot;</span>, &amp;c1, &amp;c2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the value of K: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;K);<br><br>    <span class="hljs-comment">// 计算结果并输出</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">countShortenedSubstrings</span>(S, c1, c2, K);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of shortened substrings: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/96485d5e-573f-4e60-b06f-55aecd76cf55.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 计算以c1开头、以c2结尾的子串个数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countShortenedSubstrings</span><span class="hljs-params">(<span class="hljs-type">char</span> S[], <span class="hljs-type">char</span> c1, <span class="hljs-type">char</span> c2, <span class="hljs-type">int</span> K)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(S);<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (S[i] == c1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (S[j] == c2) &#123;<br>                    <span class="hljs-comment">// 计算子串长度</span><br>                    <span class="hljs-type">int</span> length = j - i + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (length &gt;= K) &#123;<br>                        <span class="hljs-comment">// 符合条件，计数器加一</span><br>                        count++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> S[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">char</span> c1, c2;<br>    <span class="hljs-type">int</span> K;<br><br>    <span class="hljs-comment">// 读取输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the string S: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, S);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the characters c1 and c2: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c %c&quot;</span>, &amp;c1, &amp;c2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the value of K: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;K);<br><br>    <span class="hljs-comment">// 计算结果并输出</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">countShortenedSubstrings</span>(S, c1, c2, K);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of shortened substrings: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/2afe4c9e-38fc-4d3e-a152-d7e2f3093fe5.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NODES 100</span><br><br><span class="hljs-type">int</span> adjacency_list[MAX_NODES][MAX_NODES];<br><span class="hljs-type">int</span> travel_times[MAX_NODES][MAX_NODES];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> node, <span class="hljs-type">int</span> parent, <span class="hljs-type">int</span> skip_node, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> total_time = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (i != parent &amp;&amp; adjacency_list[node][i]) &#123;<br>            total_time += <span class="hljs-built_in">dfs</span>(i, node, skip_node, n);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果当前节点不是要跳过的节点，累加其摆渡车时间</span><br>    <span class="hljs-keyword">if</span> (node != skip_node) &#123;<br>        total_time += travel_times[node][parent] + travel_times[parent][node];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> total_time;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculate_travel_time</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> skip_node)</span> </span>&#123;<br>    <span class="hljs-type">int</span> total_time = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++i) &#123;<br>        total_time += <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">-1</span>, skip_node, n);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> total_time;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> skip_node = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 示例邻接列表和摆渡车时间</span><br>    <span class="hljs-type">int</span> adjacency_list[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>                                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>                                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>                                &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>                                &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>                                &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br>    <span class="hljs-type">int</span> travel_times[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>                              &#123;<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>&#125;,<br>                              &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;,<br>                              &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>                              &#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>                              &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">calculate_travel_time</span>(n, k, skip_node);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;If skip node %d, total travel time: %d\n&quot;</span>, skip_node, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/84407906-60cf-4c55-bf00-78fcb7fe3cf1.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NODES 1000</span><br><br><span class="hljs-comment">// 表示树的邻接列表</span><br><span class="hljs-type">int</span> adjacency_list[MAX_NODES][MAX_NODES];<br><span class="hljs-comment">// 标记边是否被访问过</span><br><span class="hljs-type">bool</span> visited[MAX_NODES][MAX_NODES];<br><span class="hljs-comment">// 结果数组，记录断开的边的编号</span><br><span class="hljs-type">int</span> result[MAX_NODES];<br><span class="hljs-comment">// 当前断开的边的编号</span><br><span class="hljs-type">int</span> result_index;<br><br><span class="hljs-comment">// 深度优先搜索函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> node, <span class="hljs-type">int</span> parent, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (adjacency_list[node][i] &amp;&amp; !visited[node][i]) &#123;<br>            visited[node][i] = visited[i][node] = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 如果当前边的两个端点分别为a和b，说明这条边需要断开</span><br>            <span class="hljs-keyword">if</span> ((node == a &amp;&amp; i == b) || (node == b &amp;&amp; i == a)) &#123;<br>                result[result_index++] = i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 存储边的编号（从1开始）</span><br>            &#125;<br><br>            <span class="hljs-built_in">dfs</span>(i, node, a, b, n);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-comment">// 初始化邻接列表和visited数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-type">int</span> u, v;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);<br>        adjacency_list[u - <span class="hljs-number">1</span>][v - <span class="hljs-number">1</span>] = adjacency_list[v - <span class="hljs-number">1</span>][u - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        visited[u - <span class="hljs-number">1</span>][v - <span class="hljs-number">1</span>] = visited[v - <span class="hljs-number">1</span>][u - <span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历每个数对，进行DFS判断是否可以断开</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br><br>        <span class="hljs-comment">// 重置结果数组和结果索引</span><br>        result_index = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 进行DFS遍历</span><br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, a - <span class="hljs-number">1</span>, b - <span class="hljs-number">1</span>, n);<br><br>        <span class="hljs-comment">// 如果结果索引为0，说明没有找到需要断开的边</span><br>        <span class="hljs-keyword">if</span> (result_index == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 输出断开的边的编号</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; result_index; ++j) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, result[j]);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><h2 id="三、十四届C-C-程序设计A组试题"><a href="#三、十四届C-C-程序设计A组试题" class="headerlink" title="三、十四届C&#x2F;C++程序设计A组试题"></a>三、十四届C&#x2F;C++程序设计A组试题</h2><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/b1beb923-93ca-45f6-af4a-204fdc84c480.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 检查一个数字是否是幸运数字的函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_lucky_number</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>    <span class="hljs-type">char</span> num_str[<span class="hljs-number">20</span>]; <span class="hljs-comment">// 用于将数字转换为字符串以便处理</span><br>    <span class="hljs-built_in">sprintf</span>(num_str, <span class="hljs-string">&quot;%d&quot;</span>, num);<br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">strlen</span>(num_str);<br><br>    <span class="hljs-comment">// 如果数字的位数为奇数，则不是幸运数字</span><br>    <span class="hljs-keyword">if</span> (length % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 返回假</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> half_length = length / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> first_half_sum = <span class="hljs-number">0</span>, second_half_sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 计算前半部分数字的和</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; half_length; i++) &#123;<br>        first_half_sum += num_str[i] - <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">// 将字符转换为数字</span><br>    &#125;<br><br>    <span class="hljs-comment">// 计算后半部分数字的和</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = half_length; i &lt; length; i++) &#123;<br>        second_half_sum += num_str[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断前半部分和后半部分是否相等</span><br>    <span class="hljs-keyword">return</span> first_half_sum == second_half_sum;<br>&#125;<br><br><span class="hljs-comment">// 计算在给定范围内的幸运数字的数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count_lucky_numbers</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 遍历给定范围内的所有数字</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num = start; num &lt;= end; num++) &#123;<br>        <span class="hljs-comment">// 如果是幸运数字，增加计数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_lucky_number</span>(num)) &#123;<br>            count++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> start_range = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> end_range = <span class="hljs-number">100000000</span>;<br><br>    <span class="hljs-comment">// 调用函数计算幸运数字的数量</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">count_lucky_numbers</span>(start_range, end_range);<br><br>    <span class="hljs-comment">// 打印结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There are %d lucky numbers between %d and %d.\n&quot;</span>, result, start_range, end_range);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/4f77d2d0-12b2-45bf-b520-35ba833f4370.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 定义最大题目数和最大分数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_QUESTIONS 30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SCORE 100</span><br><br><span class="hljs-comment">// 计算小蓝所有可能的答题情况数量的函数</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">count_possible_ways</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> target_score = <span class="hljs-number">70</span>;<br>    <span class="hljs-type">int</span> num_questions = <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 初始化动态规划数组</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[MAX_QUESTIONS + <span class="hljs-number">1</span>][MAX_SCORE + <span class="hljs-number">1</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 遍历每一道题目</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num_questions; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= target_score; j++) &#123;<br>            <span class="hljs-comment">// 如果不答这道题</span><br>            dp[i][j] += dp[i - <span class="hljs-number">1</span>][j];<br><br>            <span class="hljs-comment">// 如果答对这道题，分数增加10</span><br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">10</span>) &#123;<br>                dp[i][j] += dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">10</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dp[num_questions][target_score];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 调用函数计算小蓝所有可能的答题情况数量</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> possible_ways = <span class="hljs-built_in">count_possible_ways</span>();<br><br>    <span class="hljs-comment">// 打印结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小蓝所有可能的答题情况有 %lld 种。\n&quot;</span>, possible_ways);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/f9d69920-cb70-4e3f-88b1-e11cb553a1f9.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-comment">// 判断是否存在整数y和z，使得x = y^2 - z^2</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">has_yz</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> limit = (<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(x);<br><br>    <span class="hljs-comment">// 遍历y的可能取值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">1</span>; y &lt;= limit; y++) &#123;<br>        <span class="hljs-type">int</span> z_square = y * y - x;<br><br>        <span class="hljs-comment">// 如果z的平方为非负数且是完全平方数</span><br>        <span class="hljs-keyword">if</span> (z_square &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">sqrt</span>(z_square) == (<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(z_square)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 存在满足条件的y和z</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不存在满足条件的y和z</span><br>&#125;<br><br><span class="hljs-comment">// 计算满足条件的x的数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count_x</span><span class="hljs-params">(<span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 遍历给定范围内的所有x</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = L; x &lt;= R; x++) &#123;<br>        <span class="hljs-comment">// 如果存在整数y和z，使得x = y^2 - z^2</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">has_yz</span>(x)) &#123;<br>            count++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> L, R;<br><br>    <span class="hljs-comment">// 输入L和R的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the values of L and R: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;L, &amp;R);<br><br>    <span class="hljs-comment">// 调用函数计算满足条件的x的数量</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">count_x</span>(L, R);<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There are %d numbers x in the range [%d, %d] satisfying the condition.\n&quot;</span>, result, L, R);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/bafbb827-7dae-4c98-9d1a-3536d240062d.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 计算满足条件的不同子串选择方案的数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count_substring_choices</span><span class="hljs-params">(<span class="hljs-type">char</span> num_str[])</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(num_str);<br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">atoi</span>(num_str);<br>    <span class="hljs-type">int</span> choices = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 记录不同的选择方案数量</span><br>    <span class="hljs-type">char</span> substring[<span class="hljs-number">20</span>];  <span class="hljs-comment">// 假设数字最大长度为20</span><br><br>    <span class="hljs-comment">// 从左往右遍历，找到第一个递减的位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (num_str[i] &gt; num_str[i + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-comment">// 在递减位置及其左侧选择子串</span><br>            <span class="hljs-built_in">strncpy</span>(substring, num_str, i + <span class="hljs-number">1</span>);<br>            substring[i + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;  <span class="hljs-comment">// 添加字符串结束符</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择子串: %s\n&quot;</span>, substring);<br>            choices++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> choices;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> num_str[<span class="hljs-number">20</span>];  <span class="hljs-comment">// 假设数字最大长度为20</span><br><br>    <span class="hljs-comment">// 输入数字字符串</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入数字字符串: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, num_str);<br><br>    <span class="hljs-comment">// 调用函数计算满足条件的不同子串选择方案数量</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">count_substring_choices</span>(num_str);<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不同的子串选择方案数: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/de2d665d-ab0e-401d-8b31-2a6fc6e93fef.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_COLORS 1001</span><br><br><span class="hljs-comment">// 结点的定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> color;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>* children[<span class="hljs-number">1001</span>];<br>    <span class="hljs-type">int</span> num_children;<br>&#125;;<br><br><span class="hljs-comment">// 创建一个新的结点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>* <span class="hljs-built_in">createNode</span>(<span class="hljs-type">int</span> color) &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>* node = (<span class="hljs-keyword">struct</span> TreeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    node-&gt;color = color;<br>    node-&gt;num_children = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-comment">// DFS遍历并统计子树颜色个数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> TreeNode* root, <span class="hljs-type">int</span> color_count[MAX_COLORS], <span class="hljs-type">int</span>* balanced_trees)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    color_count[root-&gt;color]++;<br><br>    <span class="hljs-comment">// 递归地处理子结点</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; root-&gt;num_children; i++) &#123;<br>        <span class="hljs-built_in">dfs</span>(root-&gt;children[i], color_count, balanced_trees);<br>    &#125;<br><br>    <span class="hljs-comment">// 检查当前子树是否是颜色平衡树</span><br>    <span class="hljs-type">int</span> min_count = color_count[root-&gt;color];<br>    <span class="hljs-type">int</span> max_count = color_count[root-&gt;color];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_COLORS; i++) &#123;<br>        <span class="hljs-keyword">if</span> (color_count[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (color_count[i] &lt; min_count) min_count = color_count[i];<br>            <span class="hljs-keyword">if</span> (color_count[i] &gt; max_count) max_count = color_count[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (max_count == min_count) (*balanced_trees)++;<br>    color_count[root-&gt;color]--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-type">int</span> color_count[MAX_COLORS] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 记录每种颜色的个数</span><br>    <span class="hljs-type">int</span> balanced_trees = <span class="hljs-number">0</span>; <span class="hljs-comment">// 颜色平衡子树的数量</span><br><br>    <span class="hljs-comment">// 读取结点个数</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>* nodes[n + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 结点数组</span><br>    <span class="hljs-comment">// 初始化结点数组</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> color;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;color);<br>        nodes[i] = <span class="hljs-built_in">createNode</span>(color);<br>    &#125;<br><br>    <span class="hljs-comment">// 构建树</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> parent;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;parent);<br>        nodes[parent]-&gt;children[nodes[parent]-&gt;num_children++] = nodes[i];<br>    &#125;<br><br>    <span class="hljs-comment">// DFS遍历树并统计颜色平衡子树的数量</span><br>    <span class="hljs-built_in">dfs</span>(nodes[<span class="hljs-number">1</span>], color_count, &amp;balanced_trees);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, balanced_trees);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/f2c49888-3c12-4e1c-833a-ee0fe17e0379.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 定义最大瓜的数量和最大重量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_N 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_WEIGHT 1000</span><br><br><span class="hljs-comment">// 动态规划函数，返回最少需要劈的瓜的数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumCutting</span><span class="hljs-params">(<span class="hljs-type">int</span> weights[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> targetWeight)</span> </span>&#123;<br>    <span class="hljs-comment">// 定义动态规划数组</span><br>    <span class="hljs-type">int</span> dp[MAX_N + <span class="hljs-number">1</span>][MAX_WEIGHT + <span class="hljs-number">1</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 初始化动态规划数组</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 填充动态规划数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= targetWeight; j++) &#123;<br>            dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (j &gt;= weights[i - <span class="hljs-number">1</span>]) &#123;<br>                dp[i][j] |= dp[i - <span class="hljs-number">1</span>][j - weights[i - <span class="hljs-number">1</span>]];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果无法得到总重为targetWeight的瓜，返回-1</span><br>    <span class="hljs-keyword">if</span> (dp[n][targetWeight] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 回溯找到最少需要劈的瓜的数量</span><br>    <span class="hljs-type">int</span> cuts = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> currentWeight = targetWeight;<br>    <span class="hljs-type">int</span> currentMelon = n;<br><br>    <span class="hljs-keyword">while</span> (currentWeight &gt; <span class="hljs-number">0</span> &amp;&amp; currentMelon &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (dp[currentMelon - <span class="hljs-number">1</span>][currentWeight]) &#123;<br>            currentMelon--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            currentWeight -= weights[currentMelon - <span class="hljs-number">1</span>];<br>            cuts++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> cuts;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 示例用法</span><br>    <span class="hljs-type">int</span> weights[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(weights) / <span class="hljs-built_in">sizeof</span>(weights[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> target = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">minimumCutting</span>(weights, n, target);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, result);  <span class="hljs-comment">// 输出 2</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/49081d41-1734-4754-b6ec-f50a250be892.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-comment">// 定义无穷大值</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF INT_MAX</span><br><br><span class="hljs-comment">// 定义设备和连接的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> to;<br>    <span class="hljs-type">int</span> weight;<br>&#125;;<br><br><span class="hljs-comment">// 定义图的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Graph</span> &#123;<br>    <span class="hljs-type">int</span> vertices;           <span class="hljs-comment">// 设备的数量</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>** adjMatrix; <span class="hljs-comment">// 邻接矩阵表示的图</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化图</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Graph</span>* <span class="hljs-built_in">initializeGraph</span>(<span class="hljs-type">int</span> vertices) &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Graph</span>* graph = (<span class="hljs-keyword">struct</span> Graph*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Graph));<br>    graph-&gt;vertices = vertices;<br><br>    <span class="hljs-comment">// 为邻接矩阵分配内存</span><br>    graph-&gt;adjMatrix = (<span class="hljs-keyword">struct</span> Edge**)<span class="hljs-built_in">malloc</span>(vertices * <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Edge*));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertices; ++i) &#123;<br>        graph-&gt;adjMatrix[i] = (<span class="hljs-keyword">struct</span> Edge*)<span class="hljs-built_in">malloc</span>(vertices * <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Edge));<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertices; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; vertices; ++j) &#123;<br>            graph-&gt;adjMatrix[i][j].to = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 表示没有连接</span><br>            graph-&gt;adjMatrix[i][j].weight = INF; <span class="hljs-comment">// 初始化为无穷大</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> graph;<br>&#125;<br><br><span class="hljs-comment">// 添加无向边到图</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Graph* graph, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to, <span class="hljs-type">int</span> weight)</span> </span>&#123;<br>    graph-&gt;adjMatrix[from][to].to = to;<br>    graph-&gt;adjMatrix[from][to].weight = weight;<br><br>    <span class="hljs-comment">// 由于是无向图，需要添加反向边</span><br>    graph-&gt;adjMatrix[to][from].to = from;<br>    graph-&gt;adjMatrix[to][from].weight = weight;<br>&#125;<br><br><span class="hljs-comment">// Dijkstra算法计算从源节点到所有其他节点的最短路径</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> Graph* graph, <span class="hljs-type">int</span> source, <span class="hljs-type">int</span>* dist)</span> </span>&#123;<br>    <span class="hljs-type">int</span> visited[graph-&gt;vertices];<br><br>    <span class="hljs-comment">// 初始化距离数组和访问数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; graph-&gt;vertices; ++i) &#123;<br>        dist[i] = INF;<br>        visited[i] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    dist[source] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 源节点到自身的距离为0</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; count &lt; graph-&gt;vertices - <span class="hljs-number">1</span>; ++count) &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-comment">// 选择未访问的节点中距离最小的节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; graph-&gt;vertices; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[i] &amp;&amp; (u == <span class="hljs-number">-1</span> || dist[i] &lt; dist[u]))<br>                u = i;<br>        &#125;<br><br>        visited[u] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 标记节点为已访问</span><br><br>        <span class="hljs-comment">// 更新未访问节点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; graph-&gt;vertices; ++v) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[v] &amp;&amp; graph-&gt;adjMatrix[u][v].to != <span class="hljs-number">-1</span> &amp;&amp;<br>                dist[u] + graph-&gt;adjMatrix[u][v].weight &lt; dist[v]) &#123;<br>                dist[v] = dist[u] + graph-&gt;adjMatrix[u][v].weight;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 计算两个设备之间的通信稳定性</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculateStability</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>* dist, <span class="hljs-type">int</span> destination)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dist[destination] == INF) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 如果没有路径，则返回-1</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dist[destination];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m); <span class="hljs-comment">// 输入设备数量和连接数量</span><br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Graph</span>* graph = <span class="hljs-built_in">initializeGraph</span>(n);<br><br>    <span class="hljs-comment">// 输入物理连接的信息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        <span class="hljs-built_in">addEdge</span>(graph, u - <span class="hljs-number">1</span>, v - <span class="hljs-number">1</span>, w); <span class="hljs-comment">// 设备编号从1开始，转换为0开始的索引</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q); <span class="hljs-comment">// 查询数量</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; ++i) &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>        <span class="hljs-type">int</span>* distFromX = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-built_in">dijkstra</span>(graph, x - <span class="hljs-number">1</span>, distFromX);<br>        <span class="hljs-type">int</span> stability = <span class="hljs-built_in">calculateStability</span>(distFromX, y - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, stability);<br><br>        <span class="hljs-built_in">free</span>(distFromX);<br>    &#125;<br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">free</span>(graph-&gt;adjMatrix[i]);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(graph-&gt;adjMatrix);<br>    <span class="hljs-built_in">free</span>(graph);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/81c398ed-ccf5-4c29-b554-22f27f14fdf7.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 计算数组中每个子段的异或和并求和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); <span class="hljs-comment">// 输入数组长度</span><br><br>    <span class="hljs-type">int</span> A[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]); <span class="hljs-comment">// 输入数组元素</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 计算每个子段的异或和并求和</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> XOR_sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; n; ++j) &#123;<br>            XOR_sum ^= A[j]; <span class="hljs-comment">// 计算子段的异或和</span><br>            result += XOR_sum; <span class="hljs-comment">// 将每个子段的异或和累加到结果中</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/260d169f-a5f3-458c-81ed-de9802f89bc9.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 4</span><br><br><span class="hljs-comment">// 检查当前位置是否合法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> board[N][M], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> target_color)</span> </span>&#123;<br>    <span class="hljs-comment">// 检查是否越界</span><br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= N || j &lt; <span class="hljs-number">0</span> || j &gt;= M) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查当前位置是否已填充</span><br>    <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计周围黑色方格的数量</span><br>    <span class="hljs-type">int</span> count_black = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = i - <span class="hljs-number">1</span>; x &lt;= i + <span class="hljs-number">1</span>; x++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = j - <span class="hljs-number">1</span>; y &lt;= j + <span class="hljs-number">1</span>; y++) &#123;<br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; N &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; M &amp;&amp; board[x][y] == <span class="hljs-number">1</span>) &#123;<br>                count_black++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查是否符合数字约束</span><br>    <span class="hljs-keyword">return</span> count_black == target_color;<br>&#125;<br><br><span class="hljs-comment">// 填充周围的方格</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fill_pixels</span><span class="hljs-params">(<span class="hljs-type">int</span> board[N][M], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> color)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= N || j &lt; <span class="hljs-number">0</span> || j &gt;= M || board[i][j] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    board[i][j] = color;<br><br>    <span class="hljs-comment">// 递归填充周围的方格</span><br>    <span class="hljs-built_in">fill_pixels</span>(board, i - <span class="hljs-number">1</span>, j, color);<br>    <span class="hljs-built_in">fill_pixels</span>(board, i + <span class="hljs-number">1</span>, j, color);<br>    <span class="hljs-built_in">fill_pixels</span>(board, i, j - <span class="hljs-number">1</span>, color);<br>    <span class="hljs-built_in">fill_pixels</span>(board, i, j + <span class="hljs-number">1</span>, color);<br>&#125;<br><br><span class="hljs-comment">// 解决像素放置问题</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve_puzzle</span><span class="hljs-params">(<span class="hljs-type">int</span> board[N][M])</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-number">-1</span>) &#123;<br>                <span class="hljs-comment">// 如果当前方格有数字约束，则进行DFS填充</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_valid</span>(board, i, j, board[i][j])) &#123;<br>                    <span class="hljs-built_in">fill_pixels</span>(board, i, j, <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">fill_pixels</span>(board, i, j, <span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> initial_board[N][M] = &#123;<br>        &#123;<span class="hljs-number">-1</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;,<br>        &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">-1</span>&#125;,<br>        &#123; <span class="hljs-number">4</span>, <span class="hljs-number">-1</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;,<br>        &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 解决问题</span><br>    <span class="hljs-built_in">solve_puzzle</span>(initial_board);<br><br>    <span class="hljs-comment">// 打印填充后的棋盘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, initial_board[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/94c6e14c-dc12-42d6-b595-b4fc43574358.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min_operations</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 例如，假设有10个硬币</span><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// 调用函数计算最少需要多少次操作</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">min_operations</span>(n);<br><br>    <span class="hljs-comment">// 打印结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最少需要 %d 次操作\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 求最少需要多少次操作使所有硬币朝上</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min_operations</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 记录操作次数</span><br><br>    <span class="hljs-comment">// 从第2个硬币开始，依次判断每个位置的硬币朝上还是朝下</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-comment">// 如果当前位置的硬币朝下，则需要翻转</span><br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            count++;  <span class="hljs-comment">// 记录操作次数增加</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><h2 id="四、十三届C-C-程序设计C组试题"><a href="#四、十三届C-C-程序设计C组试题" class="headerlink" title="四、十三届C&#x2F;C++程序设计C组试题"></a>四、十三届C&#x2F;C++程序设计C组试题</h2><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/1031e081-097f-4d78-898a-8f90dbed172f.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 比较函数用于qsort</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compareChars</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">char</span> *)a - *(<span class="hljs-type">char</span> *)b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 原始字符串</span><br>    <span class="hljs-type">char</span> originalString[] = <span class="hljs-string">&quot;WHERETHEREISAWILLTHEREISAWAY&quot;</span>;<br><br>    <span class="hljs-comment">// 获取字符串长度</span><br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">strlen</span>(originalString);<br><br>    <span class="hljs-comment">// 使用qsort按字母表顺序排序字符串</span><br>    <span class="hljs-built_in">qsort</span>(originalString, length, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>), compareChars);<br><br>    <span class="hljs-comment">// 输出排序后的字符串</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排列之后的字符串：%s\n&quot;</span>, originalString);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/4f91a6ff-8ca9-4624-9db0-f810683b6a3e.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isInterestingTime</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day, <span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute)</span> </span>&#123;<br>    <span class="hljs-comment">// 将年份、月日、时分拼接成一个数字</span><br>    <span class="hljs-type">int</span> combinedNumber = year * <span class="hljs-number">1000000</span> + month * <span class="hljs-number">10000</span> + day * <span class="hljs-number">100</span> + hour * <span class="hljs-number">1</span> + minute * <span class="hljs-number">0.01</span>;<br><br>    <span class="hljs-comment">// 统计数字2和数字0的个数</span><br>    <span class="hljs-type">int</span> count2 = <span class="hljs-number">0</span>, count0 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (combinedNumber &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> digit = combinedNumber % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (digit == <span class="hljs-number">2</span>) &#123;<br>            count2++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (digit == <span class="hljs-number">0</span>) &#123;<br>            count0++;<br>        &#125;<br>        combinedNumber /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查是否符合条件</span><br>    <span class="hljs-keyword">return</span> count2 == <span class="hljs-number">3</span> &amp;&amp; count0 == <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 遍历年份</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> year = <span class="hljs-number">1000</span>; year &lt;= <span class="hljs-number">9999</span>; year++) &#123;<br>        <span class="hljs-comment">// 遍历月份</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> month = <span class="hljs-number">1</span>; month &lt;= <span class="hljs-number">12</span>; month++) &#123;<br>            <span class="hljs-comment">// 遍历日期</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> day = <span class="hljs-number">1</span>; day &lt;= <span class="hljs-number">31</span>; day++) &#123;<br>                <span class="hljs-comment">// 遍历小时</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> hour = <span class="hljs-number">0</span>; hour &lt;= <span class="hljs-number">23</span>; hour++) &#123;<br>                    <span class="hljs-comment">// 遍历分钟</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> minute = <span class="hljs-number">0</span>; minute &lt;= <span class="hljs-number">59</span>; minute++) &#123;<br>                        <span class="hljs-comment">// 检查是否符合条件</span><br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isInterestingTime</span>(year, month, day, hour, minute)) &#123;<br>                            count++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;符合条件的时间总数：%d\n&quot;</span>, count);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/f3dc20ce-81d7-4e61-b288-04fe549709ba.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPaperSize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *paperName, <span class="hljs-type">int</span> *width, <span class="hljs-type">int</span> *height)</span> </span>&#123;<br>    <span class="hljs-comment">// 解析纸张名称</span><br>    <span class="hljs-type">char</span> sizeChar;<br>    <span class="hljs-type">int</span> foldCount;<br>    <span class="hljs-built_in">sscanf</span>(paperName, <span class="hljs-string">&quot;A%c%d&quot;</span>, &amp;sizeChar, &amp;foldCount);<br><br>    <span class="hljs-comment">// 根据A纸张的尺寸计算大小</span><br>    *width = <span class="hljs-number">1189</span>;<br>    *height = <span class="hljs-number">841</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; foldCount; i++) &#123;<br>        <span class="hljs-keyword">if</span> (*width &gt; *height) &#123;<br>            *width /= <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            *height /= <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> paperName[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入纸张名称（例如：A0, A1, A2）: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, paperName);<br><br>    <span class="hljs-type">int</span> width, height;<br>    <span class="hljs-built_in">getPaperSize</span>(paperName, &amp;width, &amp;height);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s纸张的大小为：%dmm x %dmm\n&quot;</span>, paperName, width, height);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/f3e280db-a984-4904-85ec-0b7d8ace0d82.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">calculate_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> S = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            S += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)arr[i] * arr[j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> S;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 替换这里的实际整数值和数组大小</span><br>    <span class="hljs-type">int</span> numbers[] = &#123;a1, a2, <span class="hljs-comment">/*...*/</span>, an&#125;;<br>    <span class="hljs-type">int</span> size = <span class="hljs-built_in">sizeof</span>(numbers) / <span class="hljs-built_in">sizeof</span>(numbers[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">calculate_sum</span>(numbers, size);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The sum is: %lld\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/c0a2d995-5cf0-411c-859b-879e1b47f9bd.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 计算数字的数位之和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">digitSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += num % <span class="hljs-number">10</span>;<br>        num /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-comment">// 比较两个数字，按照问题描述中的规则进行比较</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> digitSumA = <span class="hljs-built_in">digitSum</span>(*(<span class="hljs-type">int</span> *)a);<br>    <span class="hljs-type">int</span> digitSumB = <span class="hljs-built_in">digitSum</span>(*(<span class="hljs-type">int</span> *)b);<br><br>    <span class="hljs-keyword">if</span> (digitSumA != digitSumB) &#123;<br>        <span class="hljs-keyword">return</span> digitSumA - digitSumB;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> *(<span class="hljs-type">int</span> *)a - *(<span class="hljs-type">int</span> *)b;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 找到排序后的第m个元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMthElement</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-type">int</span> *numbers = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br><br>    <span class="hljs-comment">// 初始化数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        numbers[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用qsort进行排序，使用自定义的比较函数</span><br>    <span class="hljs-built_in">qsort</span>(numbers, n, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), compare);<br><br>    <span class="hljs-comment">// 排序后的第m个元素</span><br>    <span class="hljs-type">int</span> result = numbers[m - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-built_in">free</span>(numbers);  <span class="hljs-comment">// 释放动态分配的内存</span><br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 替换这里的实际整数值</span><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">100</span>; <span class="hljs-comment">// 假设排序范围是1到100</span><br>    <span class="hljs-type">int</span> m = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 找排序后的第10个元素</span><br><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">findMthElement</span>(n, m);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The %dth element after sorting is: %d\n&quot;</span>, m, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/dc819394-216f-4fed-b89c-fe4337e38cea.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_N 100000</span><br><br><span class="hljs-type">int</span> prefixXor[MAX_N + <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// 计算前缀异或数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">computePrefixXor</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    prefixXor[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        prefixXor[i] = prefixXor[i - <span class="hljs-number">1</span>] ^ arr[i - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 判断是否存在异或等于 x 的两个数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasXorPair</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (prefixXor[r] ^ prefixXor[l - <span class="hljs-number">1</span>]) == x;<br>&#125;<br><br><span class="hljs-comment">// 查询阶段</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">1</span>; r &lt;= n; r++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hasXorPair</span>(l, r, x)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-type">int</span> arr[MAX_N];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 预处理阶段</span><br>    <span class="hljs-built_in">computePrefixXor</span>(arr, n);<br><br>    <span class="hljs-comment">// 查询阶段</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> l, x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;l, &amp;x);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(arr, n, l, x)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/ecd33a69-a7bd-44b6-95d1-5bba3cdf84df.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LEN 100</span><br><br><span class="hljs-comment">// 删除边缘字符的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeEdgeChars</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span> </span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-comment">// 检查当前字符是否为边缘字符</span><br>        <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; i + <span class="hljs-number">1</span> &lt; len &amp;&amp; s[i] != s[i - <span class="hljs-number">1</span>] &amp;&amp; s[i] != s[i + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-comment">// 删除当前边缘字符</span><br>            <span class="hljs-keyword">for</span> (j = i; j &lt; len - <span class="hljs-number">1</span>; j++) &#123;<br>                s[j] = s[j + <span class="hljs-number">1</span>];<br>            &#125;<br>            s[len - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            len--;<br>            i--; <span class="hljs-comment">// 回退一步，重新检查当前位置</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> s[MAX_LEN];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br><br>    <span class="hljs-comment">// 进行24次操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">24</span>; i++) &#123;<br>        <span class="hljs-built_in">removeEdgeChars</span>(s);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(s) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;EMPTY\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/cb407f96-26a2-4f75-80bf-8ddc5b82f440.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 比较函数用于排序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">int</span> *)b - *(<span class="hljs-type">int</span> *)a);<br>&#125;<br><br><span class="hljs-comment">// 计算查询结果的总和</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">calculateSum</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> queries[][<span class="hljs-number">2</span>], <span class="hljs-type">int</span> numQueries)</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 计算原始数组的和</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        sum += arr[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历每个查询范围</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numQueries; i++) &#123;<br>        <span class="hljs-type">int</span> L = queries[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> R = queries[i][<span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 将查询范围内的元素设置为当前数组中的最大值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = L - <span class="hljs-number">1</span>; j &lt; R; j++) &#123;<br>            sum += (arr[j] - arr[<span class="hljs-number">0</span>]);  <span class="hljs-comment">// 增加差值</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, numQueries;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;numQueries);<br><br>    <span class="hljs-type">int</span> arr[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 对数组进行排序</span><br>    <span class="hljs-built_in">qsort</span>(arr, n, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), compare);<br><br>    <span class="hljs-type">int</span> queries[numQueries][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numQueries; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;queries[i][<span class="hljs-number">0</span>], &amp;queries[i][<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// 计算查询结果的总和</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">calculateSum</span>(arr, n, queries, numQueries);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/d55cfb6c-87e8-490d-b976-7dbb8c5b622a.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-comment">// 技能结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> A;<br>    <span class="hljs-type">int</span> B;<br>&#125; Skill;<br><br><span class="hljs-comment">// 比较函数用于排序技能</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare_skills</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ((Skill*)b)-&gt;A - ((Skill*)a)-&gt;A;<br>&#125;<br><br><span class="hljs-comment">// 计算最大攻击力提升</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max_attack_increase</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M, Skill skills[])</span> </span>&#123;<br>    <span class="hljs-comment">// 按攻击力提升排序</span><br>    <span class="hljs-built_in">qsort</span>(skills, N, <span class="hljs-built_in">sizeof</span>(Skill), compare_skills);<br><br>    <span class="hljs-type">int</span> total_attack_increase = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        <span class="hljs-type">int</span> max_upgrades = <span class="hljs-built_in">ceil</span>((<span class="hljs-type">double</span>)skills[i].A / skills[i].B);<br>        <span class="hljs-type">int</span> upgrades = <span class="hljs-built_in">fmin</span>(max_upgrades, M);<br>        total_attack_increase += upgrades * skills[i].A;<br>        M -= upgrades;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> total_attack_increase;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 示例输入</span><br>    <span class="hljs-type">int</span> N = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> M = <span class="hljs-number">5</span>;<br>    Skill skills[] = &#123;&#123;<span class="hljs-number">10</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><br>    <span class="hljs-comment">// 计算最大攻击力提升</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">max_attack_increase</span>(N, M, skills);<br><br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最多可以提高的攻击力: %d\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><p><img src="https://aitechtogether.com/wp-content/uploads_new/2024/02/6e4c75b0-82eb-4271-b678-43234c6bf895.webp" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 哈希表节点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next;<br>&#125; Node;<br><br><span class="hljs-comment">// 哈希表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Node** table;<br>    <span class="hljs-type">int</span> size;<br>&#125; HashMap;<br><br><span class="hljs-comment">// 初始化哈希表</span><br><span class="hljs-function">HashMap* <span class="hljs-title">createHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> </span>&#123;<br>    HashMap* map = (HashMap*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(HashMap));<br>    map-&gt;size = size;<br>    map-&gt;table = (Node**)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node*) * size);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        map-&gt;table[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br><br><span class="hljs-comment">// 插入哈希表节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertHashMap</span><span class="hljs-params">(HashMap* map, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-built_in">abs</span>(value) % map-&gt;size;<br><br>    Node* newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>    newNode-&gt;value = value;<br>    newNode-&gt;count = <span class="hljs-number">1</span>;<br>    newNode-&gt;next = map-&gt;table[index];<br>    map-&gt;table[index] = newNode;<br>&#125;<br><br><span class="hljs-comment">// 查询哈希表节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">queryHashMap</span><span class="hljs-params">(HashMap* map, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-built_in">abs</span>(value) % map-&gt;size;<br>    Node* current = map-&gt;table[index];<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;value == value) &#123;<br>            <span class="hljs-keyword">return</span> current-&gt;count;<br>        &#125;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 计算区间内出现ki次的数的数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countOccurrences</span><span class="hljs-params">(<span class="hljs-type">int</span>* prefixSum, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, HashMap* map, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span>) &#123;<br>        count = <span class="hljs-built_in">queryHashMap</span>(map, prefixSum[right]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        count = <span class="hljs-built_in">queryHashMap</span>(map, prefixSum[right] - prefixSum[left - <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count == k ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-comment">// 计算前缀和</span><br>    <span class="hljs-type">int</span>* prefixSum = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>    prefixSum[<span class="hljs-number">0</span>] = A[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        prefixSum[i] = prefixSum[i - <span class="hljs-number">1</span>] + A[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 构建哈希表</span><br>    HashMap* map = <span class="hljs-built_in">createHashMap</span>(n);<br><br>    <span class="hljs-comment">// 插入前缀和到哈希表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">insertHashMap</span>(map, prefixSum[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 示例查询</span><br>    <span class="hljs-type">int</span> queries[][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><br>    <span class="hljs-comment">// 处理查询</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>        <span class="hljs-type">int</span> left = queries[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> right = queries[i][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> k = queries[i][<span class="hljs-number">2</span>];<br><br>        <span class="hljs-type">int</span> result = <span class="hljs-built_in">countOccurrences</span>(prefixSum, left, right, map, k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在区间[%d, %d]内出现%d次的数有%d个\n&quot;</span>, left, right, k, result);<br>    &#125;<br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-built_in">free</span>(prefixSum);<br>    <span class="hljs-built_in">free</span>(map-&gt;table);<br>    <span class="hljs-built_in">free</span>(map);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++</p><h2 id="五、十三届C-C-程序设计B组试题"><a href="#五、十三届C-C-程序设计B组试题" class="headerlink" title="五、十三届C&#x2F;C++程序设计B组试题"></a>五、十三届C&#x2F;C++程序设计B组试题</h2><h2 id="六、十三届C-C-程序设计A组试题"><a href="#六、十三届C-C-程序设计A组试题" class="headerlink" title="六、十三届C&#x2F;C++程序设计A组试题"></a>六、十三届C&#x2F;C++程序设计A组试题</h2><h2 id="七、十二届C-C-程序设计C组试题"><a href="#七、十二届C-C-程序设计C组试题" class="headerlink" title="七、十二届C&#x2F;C++程序设计C组试题"></a>七、十二届C&#x2F;C++程序设计C组试题</h2><h2 id="八、十二届C-C-程序设计B组试题"><a href="#八、十二届C-C-程序设计B组试题" class="headerlink" title="八、十二届C&#x2F;C++程序设计B组试题"></a>八、十二届C&#x2F;C++程序设计B组试题</h2><h2 id="九、十二届C-C-程序设计A组试题"><a href="#九、十二届C-C-程序设计A组试题" class="headerlink" title="九、十二届C&#x2F;C++程序设计A组试题"></a>九、十二届C&#x2F;C++程序设计A组试题</h2><h2 id="十、十一届C-C-程序设计C组试题"><a href="#十、十一届C-C-程序设计C组试题" class="headerlink" title="十、十一届C&#x2F;C++程序设计C组试题"></a>十、十一届C&#x2F;C++程序设计C组试题</h2><blockquote><p>版权声明：本文为博主<a href="https://blog.csdn.net/weixin_56641478">作者：慢了半拍i</a>原创文章，版权归属原作者，如果侵权，请联系我们删除！</p><p>原文链接：<a href="https://blog.csdn.net/weixin_56641478/article/details/135726057">https://blog.csdn.net/weixin_56641478/article/details/135726057</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验三</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h1><p>[TOC]</p></blockquote><h3 id="3-1栈的顺序存储结构"><a href="#3-1栈的顺序存储结构" class="headerlink" title="3.1栈的顺序存储结构"></a>3.1栈的顺序存储结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义顺序栈的最大大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 5</span><br><br><span class="hljs-comment">// 定义顺序栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> top;<br>&#125; SqStack;<br><br><span class="hljs-comment">// 初始化顺序栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span> </span>&#123;<br>    S.top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断顺序栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> S.top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断顺序栈是否已满</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> S.top == MAXSIZE - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈已满，无法入栈。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    S.data[++S.top] = elem;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法出栈。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = S.data[S.top--];<br>    cout &lt;&lt; <span class="hljs-string">&quot;出栈元素：&quot;</span> &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot;，当前栈顶指针：&quot;</span> &lt;&lt; S.top &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取顺序栈栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法获取栈顶元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = S.data[S.top];<br>    cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取栈顶元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 顺序栈</span><br>    SqStack sqStack;<br>    <span class="hljs-built_in">InitStack</span>(sqStack);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitStack</span>(sqStack);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建栈成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">GetTop</span>(sqStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入栈的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入栈元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入栈结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Push</span>(sqStack, elem)) &#123;<br>                    cout&lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>                cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶指针：&quot;</span> &lt;&lt; sqStack.top &lt;&lt; endl;<br>         <br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-built_in">Pop</span>(sqStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2栈的链式存储"><a href="#3-2栈的链式存储" class="headerlink" title="3.2栈的链式存储"></a>3.2栈的链式存储</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class="hljs-comment">// 定义链式栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Node* top;<br>&#125; LinkedStack;<br><br><span class="hljs-comment">// 初始化链式栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(LinkedStack&amp; S)</span> </span>&#123;<br>    S.top = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断链式栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkedStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> S.top == <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkedStack&amp; S, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-keyword">new</span> Node;<br>    newNode-&gt;data = elem;<br>    newNode-&gt;next = S.top;<br>    S.top = newNode;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkedStack&amp; S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法出栈。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    Node* temp = S.top;<br>    elem = temp-&gt;data;<br>    S.top = temp-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;出栈元素：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取链式栈栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(LinkedStack S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法获取栈顶元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = S.top-&gt;data;<br>    cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取栈顶元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 链式栈</span><br>    LinkedStack linkedStack;<br>    <span class="hljs-built_in">InitStack</span>(linkedStack);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitStack</span>(linkedStack);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建栈成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">GetTop</span>(linkedStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入栈的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入栈元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入栈结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Push</span>(linkedStack, elem)) &#123;<br>                    cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">Pop</span>(linkedStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3队列的链式存储"><a href="#3-3队列的链式存储" class="headerlink" title="3.3队列的链式存储"></a>3.3队列的链式存储</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义循环队列的最大大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 6</span><br><br><span class="hljs-comment">// 定义循环队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> front;<br>    <span class="hljs-type">int</span> rear;<br>&#125; CircularQueue;<br><br><span class="hljs-comment">// 初始化循环队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(CircularQueue&amp; Q)</span> </span>&#123;<br>    Q.front = Q.rear = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断循环队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(CircularQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == Q.rear;<br>&#125;<br><br><span class="hljs-comment">// 判断循环队列是否已满</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(CircularQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (Q.rear + <span class="hljs-number">1</span>) % MAXSIZE == Q.front;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(CircularQueue&amp; Q, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列已满，无法入队。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>   Q.data[Q.rear] = elem;<br>   Q.rear = (Q.rear + <span class="hljs-number">1</span>) % MAXSIZE; <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(CircularQueue&amp; Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法出队。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = Q.data[Q.front];<br>    Q.front = (Q.front + <span class="hljs-number">1</span>) % MAXSIZE;<br>   <br><br>    cout &lt;&lt; <span class="hljs-string">&quot;出队元素：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取队头元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(CircularQueue Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法获取队头元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = Q.data[Q.front];<br>    cout &lt;&lt; <span class="hljs-string">&quot;队头元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建队列&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取队头元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 循环队列</span><br>    CircularQueue circularQueue;<br>    <span class="hljs-built_in">InitQueue</span>(circularQueue);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;  <br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitQueue</span>(circularQueue);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建队列成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">GetFront</span>(circularQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入队的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入队元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入队结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Enqueue</span>(circularQueue, elem)) &#123;<br>                    cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">Dequeue</span>(circularQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4队列的链式存储"><a href="#3-4队列的链式存储" class="headerlink" title="3.4队列的链式存储"></a>3.4队列的链式存储</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class="hljs-comment">// 定义链式队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Node* front;<br>    Node* rear;<br>&#125; LinkedQueue;<br><br><span class="hljs-comment">// 初始化链式队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkedQueue&amp; Q)</span> </span>&#123;<br>    Q.front = Q.rear = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断链式队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkedQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(LinkedQueue&amp; Q, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-keyword">new</span> Node;<br>    newNode-&gt;data = elem;<br>    newNode-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        Q.front = Q.rear = newNode;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        Q.rear-&gt;next = newNode;<br>        Q.rear = newNode;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(LinkedQueue&amp; Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法出队。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    Node* temp = Q.front;<br>    elem = temp-&gt;data;<br><br>    Q.front = temp-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br><br>    <span class="hljs-keyword">if</span> (Q.front == <span class="hljs-literal">nullptr</span>) &#123;<br>        Q.rear = <span class="hljs-literal">nullptr</span>; <br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;出队元素：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取队头元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(LinkedQueue Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法获取队头元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = Q.front-&gt;data;<br>    cout &lt;&lt; <span class="hljs-string">&quot;队头元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建队列&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取队头元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 链式队列</span><br>    LinkedQueue linkedQueue;<br>    <span class="hljs-built_in">InitQueue</span>(linkedQueue);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitQueue</span>(linkedQueue);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建队列成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">GetFront</span>(linkedQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入队的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入队元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入队结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Enqueue</span>(linkedQueue, elem)) &#123;<br>                    cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">Dequeue</span>(linkedQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验二</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 单链表节点结构</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class="hljs-comment">// 创建一个新节点</span><br><span class="hljs-function">Node* <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-keyword">new</span> Node;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> newNode;<br>&#125;<br><br><span class="hljs-comment">// 插入节点到单链表尾部</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertNodeAtEnd</span><span class="hljs-params">(Node*&amp; head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-built_in">createNode</span>(value);<br><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span>) &#123;<br>        head = newNode;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node* current = head;<br>        <span class="hljs-keyword">while</span> (current-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        current-&gt;next = newNode;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 查找节点在单链表中的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findNodePosition</span><span class="hljs-params">(Node* head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-type">int</span> position = <span class="hljs-number">1</span>;<br>    Node* current = head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> position;<br>        &#125;<br>        current = current-&gt;next;<br>        position++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 未找到</span><br>&#125;<br><br><span class="hljs-comment">// 删除节点在单链表中的位置</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">deleteNodeAtPosition</span><span class="hljs-params">(Node*&amp; head, <span class="hljs-type">int</span> position)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 无效的位置</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (position == <span class="hljs-number">1</span>) &#123;<br>        Node* temp = head;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    Node* current = head;<br>    <span class="hljs-type">int</span> currentPosition = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (currentPosition &lt; position - <span class="hljs-number">1</span> &amp;&amp; current != <span class="hljs-literal">nullptr</span>) &#123;<br>        current = current-&gt;next;<br>        currentPosition++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (current == <span class="hljs-literal">nullptr</span> || current-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 位置超出链表长度</span><br>    &#125;<br><br>    Node* temp = current-&gt;next;<br>    current-&gt;next = current-&gt;next-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并两个有序单链表</span><br><span class="hljs-function">Node* <span class="hljs-title">mergeSortedLists</span><span class="hljs-params">(Node* list1, Node* list2)</span> </span>&#123;<br>    Node* mergedList = <span class="hljs-literal">nullptr</span>;<br>    Node* current = mergedList;<br><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">nullptr</span> &amp;&amp; list2 != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (list1-&gt;data &lt; list2-&gt;data) &#123;<br>            <span class="hljs-built_in">insertNodeAtEnd</span>(current, list1-&gt;data);<br>            list1 = list1-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">insertNodeAtEnd</span>(current, list2-&gt;data);<br>            list2 = list2-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mergedList == <span class="hljs-literal">nullptr</span>) &#123;<br>            mergedList = current;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理剩余的元素</span><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(current, list1-&gt;data);<br>        list1 = list1-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (list2 != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(current, list2-&gt;data);<br>        list2 = list2-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> mergedList;<br>&#125;<br><br><span class="hljs-comment">// 打印单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(Node* head)</span> </span>&#123;<br>    Node* current = head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">nullptr</span>) &#123;<br>        cout &lt;&lt; current-&gt;data &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span>;<br>        current = current-&gt;next;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;nullptr&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node* list1 = <span class="hljs-literal">nullptr</span>;<br>    Node* list2 = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-comment">// 建立单链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(list1, i * <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(list2, i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;List 1: &quot;</span>;<br>    <span class="hljs-built_in">printList</span>(list1);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;List 2: &quot;</span>;<br>    <span class="hljs-built_in">printList</span>(list2);<br><br>    <span class="hljs-comment">// 合并有序单链表</span><br>    Node* mergedList = <span class="hljs-built_in">mergeSortedLists</span>(list1, list2);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;Merged List: &quot;</span>;<br>    <span class="hljs-built_in">printList</span>(mergedList);<br><br>    <span class="hljs-comment">// 查找节点位置</span><br>    <span class="hljs-type">int</span> searchValue = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> position = <span class="hljs-built_in">findNodePosition</span>(mergedList, searchValue);<br>    <span class="hljs-keyword">if</span> (position != <span class="hljs-number">-1</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Found &quot;</span> &lt;&lt; searchValue &lt;&lt; <span class="hljs-string">&quot; at position &quot;</span> &lt;&lt; position &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; searchValue &lt;&lt; <span class="hljs-string">&quot; not found in the merged list.&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-type">int</span> deletePosition = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deleteNodeAtPosition</span>(mergedList, deletePosition)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Deleted node at position &quot;</span> &lt;&lt; deletePosition &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Updated List: &quot;</span>;<br>        <span class="hljs-built_in">printList</span>(mergedList);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Unable to delete node at position &quot;</span> &lt;&lt; deletePosition &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-keyword">while</span> (mergedList != <span class="hljs-literal">nullptr</span>) &#123;<br>        Node* temp = mergedList;<br>        mergedList = mergedList-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构实验</title>
    <link href="/2024/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/"/>
    <url>/2024/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="数据结构实验-test"><a href="#数据结构实验-test" class="headerlink" title="数据结构实验 test"></a>数据结构实验 test</h1><p>[TOC]</p></blockquote><h2 id="一、实验一"><a href="#一、实验一" class="headerlink" title="一、实验一"></a><a href="http://htmlpreview.github.io/?https://github.com/yanhuigang173/markdown-xtxi/blob/main/typora/uiyjyi.html">一、实验一</a></h2><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><ul><li><p>编程实现顺序表的以下基本操作：建立顺序表，修改顺序表，插入顺序表，删除顺序表。</p></li><li><p>采用顺序表结构编程实现：两个集合的运算：交集&#x2F;并集&#x2F;差集。</p></li></ul><h2 id="二、实验二"><a href="#二、实验二" class="headerlink" title="二、实验二"></a><a href="http://htmlpreview.github.io/?https://github.com/yanhuigang173/markdown-xtxi/blob/main/typora/uiyjer.html">二、实验二</a></h2><h3 id="链式表"><a href="#链式表" class="headerlink" title="链式表"></a>链式表</h3><ul><li><p>掌握线性表的链式存储结构；</p></li><li><p>掌握单链表及其基本操作的实现。</p></li></ul><h2 id="三、实验三"><a href="#三、实验三" class="headerlink" title="三、实验三"></a><a href="http://htmlpreview.github.io/?https://github.com/yanhuigang173/markdown-xtxi/blob/main/typora/uiyjsj.html">三、实验三</a></h2><ul><li>掌握栈的顺序存储结构、链式存储结构及其基本操作；</li><li>掌握队列的顺序存储结构、链式存储结构及其基本操作。</li></ul><h2 id="四、实验四"><a href="#四、实验四" class="headerlink" title="四、实验四"></a><a href="lmjp">四、实验四</a></h2><ul><li><p>掌握二叉树的二叉链表存储方式及二叉树的特征；</p></li><li><p>验证二叉树在二叉链表存储结构下遍历操作的实现；</p></li><li><p>掌握哈夫曼树的构造方法和哈夫曼编码的方法。</p></li></ul><h2 id="五、实验五"><a href="#五、实验五" class="headerlink" title="五、实验五"></a><a href="lmjp">五、实验五</a></h2><h3 id="图的操作（6学时）"><a href="#图的操作（6学时）" class="headerlink" title="图的操作（6学时）"></a>图的操作（6学时）</h3><ul><li><p>采用邻接矩阵&#x2F;邻接表建立图；</p></li><li><p>采用深度优先&#x2F;广度优先搜索方式遍历图；</p></li><li><p>编程实现Dijkstra最短路径算法。暂无</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验一</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ok 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> <span class="hljs-keyword">error</span> 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxsize 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> overflow -2</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> status;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elemtype; <br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Elemtype* elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; sqlist;<br><span class="hljs-comment">//初始化线性表</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">initlist</span><span class="hljs-params">(sqlist&amp; l)</span> </span>&#123;<br>    l.elem = <span class="hljs-keyword">new</span> Elemtype[maxsize];<br>    <span class="hljs-keyword">if</span> (!l.elem) <span class="hljs-built_in">exit</span>(overflow);<br>    l.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//1.清空线性表</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">clearlist</span><span class="hljs-params">(sqlist&amp; l)</span></span><br><span class="hljs-function"></span>&#123;<br>    l.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">delete</span>[] l.elem;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已清空线性表&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//2.判断线性表是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isempty</span><span class="hljs-params">(sqlist&amp; l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l.length == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;线性表为空&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;线性表不为空&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//3. 求线性表的长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qqlength</span><span class="hljs-params">(sqlist l)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;线性表长度为: &quot;</span> &lt;&lt; l.length &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//4. 获取线性表指定位置元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getelem</span><span class="hljs-params">(sqlist l, Elemtype&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入查询的位置：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> i;<br>    cin &gt;&gt; i;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; l.length) <br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入位置错误&quot;</span> &lt;&lt; endl; <span class="hljs-keyword">return</span> error;<br>    &#125;<br>    e = l.elem[i - <span class="hljs-number">1</span>];<br>    cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;个元素为: &quot;</span> &lt;&lt; e &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//5. 求前驱</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qqqmqu</span><span class="hljs-params">(sqlist l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    cout &lt;&lt; <span class="hljs-string">&quot;求第几个元素的前驱&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; i;<br>    <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">1</span> || i &gt; l.length)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入数字错误&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; l.elem[i - <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-comment">//6. 求后继</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qqhzji</span><span class="hljs-params">(sqlist l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    cout &lt;&lt; <span class="hljs-string">&quot;求第几个元素的后继&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; i;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt;= l.length) &#123; cout &lt;&lt; <span class="hljs-string">&quot;输入错误&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; l.elem[i] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-comment">//7.在线性表内插入元素</span><br><span class="hljs-function">status <span class="hljs-title">listinsert</span><span class="hljs-params">(sqlist&amp; l, <span class="hljs-type">int</span> i, Elemtype e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span> (l.length == maxsize) <br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;线性表已满&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> error; <br>    &#125;<br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;l.length + <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;插入位置错误&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> error;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; i &lt;= l.length + <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = l.length - <span class="hljs-number">1</span>; j &gt;= i - <span class="hljs-number">1</span>; j--)<br>        &#123;<br>            l.elem[j + <span class="hljs-number">1</span>] = l.elem[j];<br>        &#125;<br><br>        l.elem[i - <span class="hljs-number">1</span>] = e;<br>        l.length++;<br>        <span class="hljs-keyword">return</span> ok;<br>    &#125;<br>    <span class="hljs-keyword">return</span> error;<br>&#125;<br><span class="hljs-comment">//8.在线性表里删除元素</span><br><span class="hljs-function">status <span class="hljs-title">listdelete</span><span class="hljs-params">(sqlist&amp; l, <span class="hljs-type">int</span> i, Elemtype&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span> (l.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> error;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; l.length) <span class="hljs-keyword">return</span> error;<br>    <span class="hljs-keyword">else</span> &#123;<br>        e = l.elem[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &lt; l.length - <span class="hljs-number">1</span>; j++)<br>            l.elem[j] = l.elem[j + <span class="hljs-number">1</span>];<br>    &#125;<br>    l.length--;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//9.显示线性表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(sqlist&amp; l)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;线性表中的元素为: &quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l.length; i++) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; l.elem[i] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    sqlist l; <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">initlist</span>(l);<br>    Elemtype e = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> select = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;1. 清空顺序表&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;2. 判断线性表是否为空&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;3. 求线性表的长度&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;4. 获取线性表指定位置元素&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;5. 求前驱&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;6. 求后继&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;7. 在线性表指定位置插入元素&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;8.删除线性表指定位置元素 &quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;9.显示线性表&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;    退出，输入一个负数&quot;</span> &lt;&lt; endl;<br>        cin &gt;&gt; select;<br><br>        <span class="hljs-keyword">switch</span> (select) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        &#123; <span class="hljs-built_in">clearlist</span>(l);<br>        <span class="hljs-keyword">break</span>; &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">isempty</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">qqlength</span>(l);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">getelem</span>(l, e);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">qqqmqu</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-built_in">qqhzji</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        &#123;<br>            <span class="hljs-type">int</span> n; <span class="hljs-comment">// 连续插入的元素数量</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要连续插入的元素数量: &quot;</span>;<br>            cin &gt;&gt; n;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-type">int</span> e, i;<br>                cout &lt;&lt; <span class="hljs-string">&quot;请输入插入的位置和元素: &quot;</span>;<br>                cin &gt;&gt; i &gt;&gt; e;<br>                <span class="hljs-built_in">listinsert</span>(l, i, e); <br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: &#123;<br>            <span class="hljs-type">int</span> i, e;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要删除的位置: &quot;</span>;<br>            cin &gt;&gt; i;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listdelete</span>(l, i, e) == ok)<br>                cout &lt;&lt; <span class="hljs-string">&quot;删除成功, 删除的元素为: &quot;</span> &lt;&lt; e &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;删除失败&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-built_in">output</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验四</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E5%9B%9B%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%888%E5%AD%A6%E6%97%B6%EF%BC%89/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E5%9B%9B%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%888%E5%AD%A6%E6%97%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="实验四-二叉树的操作"><a href="#实验四-二叉树的操作" class="headerlink" title="实验四 二叉树的操作"></a>实验四 二叉树的操作</h1><h1 id="（8学时）"><a href="#（8学时）" class="headerlink" title="（8学时）"></a>（8学时）</h1><ol><li><strong>实验性质</strong>：</li></ol><p>综合性实验</p><p>2．要求：</p><p>（1）掌握二叉树的二叉链表存储方式及二叉树的特征；</p><p>（2）验证二叉树在二叉链表存储结构下遍历操作的实现；</p><p>（3）掌握哈夫曼树的构造方法和哈夫曼编码的方法。</p><p>3.实验目的</p><p>通过该实验，可以熟练掌握二叉树的存储方式、遍历操作实现及构造赫夫曼树和哈夫曼编码的方法。</p><p>4.实验内容</p><p>（1）采用二叉链表结构建立二叉树；</p><p>（2）编程实现二叉树的先序、中序、后序和层序遍历；</p><p>（3）编程实现：求二叉树的高度和叶子结点个数；</p><p>（4）应用实现：哈夫曼编码。</p><p>5.验收&#x2F;测试用例</p><ul><li>构造二叉链表表示下列表达式(算法5.3)，红色十字为根节点</li></ul><blockquote><p>中序遍历 ：a-b*c&#x2F;(d+e*f)+g*(h+i)</p></blockquote><ul><li>实现上述二叉链表的先序、中序、后序遍历，输入相应的先序序列、中序序列、后序序列。</li></ul><p>例如： 输入</p><blockquote><p> +-a##*b##&#x2F;c##+d##*e##f##*g##+h##i##</p></blockquote><p>输出</p><p>“先序序列： +-a*b&#x2F;c+d*ef*g+hi”</p><ul><li><p>编程实现，输出上述二叉树的高度和叶子结点个数；</p></li><li><p>设有正文AADBAACACCDACACAADBBCD，编程统计字符集A,B,C,D的出现,次数。设计一套Huffman编码，使得上述正文的编码最短，并且计算它的带权路径长度。</p><p>A(9次）B（3次）C（6次）D（4次）</p><h3 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h3></li></ul><pre><code class=" mermaid">graph TD    plus(&quot;+&quot;) --&gt; minus(&quot;-&quot;)    minus --&gt; a(&quot;a&quot;)    minus --&gt; multiply(&quot;*&quot;)    multiply --&gt; b(&quot;b&quot;)    multiply --&gt; divide(&quot;/&quot;)    divide --&gt; c(&quot;c&quot;)    plus --&gt; multiply2(&quot;*&quot;)    multiply2 --&gt; g(&quot;g&quot;)    multiply2 --&gt; plus2(&quot;+&quot;)    plus2 --&gt; h(&quot;h&quot;)    plus2 --&gt; i(&quot;i&quot;)    divide --&gt; plus3(&quot;+&quot;)    plus3 --&gt; d(&quot;d&quot;)    plus3 --&gt; multiply3(&quot;*&quot;)    multiply3 --&gt; e(&quot;e&quot;)    multiply3 --&gt; f(&quot;f&quot;)</code></pre><h3 id="哈夫曼树结构"><a href="#哈夫曼树结构" class="headerlink" title="哈夫曼树结构"></a>哈夫曼树结构</h3><pre><code class=" mermaid">graph TD  22((&quot;22&quot;)) --&gt;|0| A((&quot;A&quot;))  22((&quot;22&quot;)) ---&gt;|1| 13((&quot;13&quot;))  13 --&gt;|0| C((&quot;C&quot;))  13 ---&gt;|1| 7((&quot;7&quot;))  7 --&gt;|0| B((&quot;B&quot;))  7 ---&gt;|1| D((&quot;D&quot;))</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
