<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构-实验一</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ok 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> <span class="hljs-keyword">error</span> 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxsize 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> overflow -2</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> status;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elemtype; <br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Elemtype* elem;<br>    <span class="hljs-type">int</span> length;<br>&#125; sqlist;<br><span class="hljs-comment">//初始化线性表</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">initlist</span><span class="hljs-params">(sqlist&amp; l)</span> </span>&#123;<br>    l.elem = <span class="hljs-keyword">new</span> Elemtype[maxsize];<br>    <span class="hljs-keyword">if</span> (!l.elem) <span class="hljs-built_in">exit</span>(overflow);<br>    l.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//1.清空线性表</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">clearlist</span><span class="hljs-params">(sqlist&amp; l)</span></span><br><span class="hljs-function"></span>&#123;<br>    l.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">delete</span>[] l.elem;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已清空线性表&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//2.判断线性表是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isempty</span><span class="hljs-params">(sqlist&amp; l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l.length == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;线性表为空&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;线性表不为空&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//3. 求线性表的长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qqlength</span><span class="hljs-params">(sqlist l)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;线性表长度为: &quot;</span> &lt;&lt; l.length &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//4. 获取线性表指定位置元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getelem</span><span class="hljs-params">(sqlist l, Elemtype&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入查询的位置：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> i;<br>    cin &gt;&gt; i;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; l.length) <br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入位置错误&quot;</span> &lt;&lt; endl; <span class="hljs-keyword">return</span> error;<br>    &#125;<br>    e = l.elem[i - <span class="hljs-number">1</span>];<br>    cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;个元素为: &quot;</span> &lt;&lt; e &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//5. 求前驱</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qqqmqu</span><span class="hljs-params">(sqlist l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    cout &lt;&lt; <span class="hljs-string">&quot;求第几个元素的前驱&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; i;<br>    <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">1</span> || i &gt; l.length)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入数字错误&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; l.elem[i - <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-comment">//6. 求后继</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qqhzji</span><span class="hljs-params">(sqlist l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    cout &lt;&lt; <span class="hljs-string">&quot;求第几个元素的后继&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; i;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt;= l.length) &#123; cout &lt;&lt; <span class="hljs-string">&quot;输入错误&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i+<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; l.elem[i] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-comment">//7.在线性表内插入元素</span><br><span class="hljs-function">status <span class="hljs-title">listinsert</span><span class="hljs-params">(sqlist&amp; l, <span class="hljs-type">int</span> i, Elemtype e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span> (l.length == maxsize) <br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;线性表已满&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> error; <br>    &#125;<br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;l.length + <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;插入位置错误&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> error;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; i &lt;= l.length + <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = l.length - <span class="hljs-number">1</span>; j &gt;= i - <span class="hljs-number">1</span>; j--)<br>        &#123;<br>            l.elem[j + <span class="hljs-number">1</span>] = l.elem[j];<br>        &#125;<br><br>        l.elem[i - <span class="hljs-number">1</span>] = e;<br>        l.length++;<br>        <span class="hljs-keyword">return</span> ok;<br>    &#125;<br>    <span class="hljs-keyword">return</span> error;<br>&#125;<br><span class="hljs-comment">//8.在线性表里删除元素</span><br><span class="hljs-function">status <span class="hljs-title">listdelete</span><span class="hljs-params">(sqlist&amp; l, <span class="hljs-type">int</span> i, Elemtype&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span> (l.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> error;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; l.length) <span class="hljs-keyword">return</span> error;<br>    <span class="hljs-keyword">else</span> &#123;<br>        e = l.elem[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &lt; l.length - <span class="hljs-number">1</span>; j++)<br>            l.elem[j] = l.elem[j + <span class="hljs-number">1</span>];<br>    &#125;<br>    l.length--;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//9.显示线性表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(sqlist&amp; l)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;线性表中的元素为: &quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l.length; i++) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; l.elem[i] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    sqlist l; <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">initlist</span>(l);<br>    Elemtype e = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> select = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;1. 清空顺序表&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;2. 判断线性表是否为空&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;3. 求线性表的长度&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;4. 获取线性表指定位置元素&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;5. 求前驱&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;6. 求后继&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;7. 在线性表指定位置插入元素&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;8.删除线性表指定位置元素 &quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;9.显示线性表&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;    退出，输入一个负数&quot;</span> &lt;&lt; endl;<br>        cin &gt;&gt; select;<br><br>        <span class="hljs-keyword">switch</span> (select) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        &#123; <span class="hljs-built_in">clearlist</span>(l);<br>        <span class="hljs-keyword">break</span>; &#125;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">isempty</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">qqlength</span>(l);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">getelem</span>(l, e);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">qqqmqu</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-built_in">qqhzji</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        &#123;<br>            <span class="hljs-type">int</span> n; <span class="hljs-comment">// 连续插入的元素数量</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要连续插入的元素数量: &quot;</span>;<br>            cin &gt;&gt; n;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-type">int</span> e, i;<br>                cout &lt;&lt; <span class="hljs-string">&quot;请输入插入的位置和元素: &quot;</span>;<br>                cin &gt;&gt; i &gt;&gt; e;<br>                <span class="hljs-built_in">listinsert</span>(l, i, e); <br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: &#123;<br>            <span class="hljs-type">int</span> i, e;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要删除的位置: &quot;</span>;<br>            cin &gt;&gt; i;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listdelete</span>(l, i, e) == ok)<br>                cout &lt;&lt; <span class="hljs-string">&quot;删除成功, 删除的元素为: &quot;</span> &lt;&lt; e &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;删除失败&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-built_in">output</span>(l);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验二</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 单链表节点结构</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class="hljs-comment">// 创建一个新节点</span><br><span class="hljs-function">Node* <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-keyword">new</span> Node;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> newNode;<br>&#125;<br><br><span class="hljs-comment">// 插入节点到单链表尾部</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertNodeAtEnd</span><span class="hljs-params">(Node*&amp; head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-built_in">createNode</span>(value);<br><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span>) &#123;<br>        head = newNode;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node* current = head;<br>        <span class="hljs-keyword">while</span> (current-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        current-&gt;next = newNode;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 查找节点在单链表中的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findNodePosition</span><span class="hljs-params">(Node* head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-type">int</span> position = <span class="hljs-number">1</span>;<br>    Node* current = head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> position;<br>        &#125;<br>        current = current-&gt;next;<br>        position++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 未找到</span><br>&#125;<br><br><span class="hljs-comment">// 删除节点在单链表中的位置</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">deleteNodeAtPosition</span><span class="hljs-params">(Node*&amp; head, <span class="hljs-type">int</span> position)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 无效的位置</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (position == <span class="hljs-number">1</span>) &#123;<br>        Node* temp = head;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    Node* current = head;<br>    <span class="hljs-type">int</span> currentPosition = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (currentPosition &lt; position - <span class="hljs-number">1</span> &amp;&amp; current != <span class="hljs-literal">nullptr</span>) &#123;<br>        current = current-&gt;next;<br>        currentPosition++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (current == <span class="hljs-literal">nullptr</span> || current-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 位置超出链表长度</span><br>    &#125;<br><br>    Node* temp = current-&gt;next;<br>    current-&gt;next = current-&gt;next-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并两个有序单链表</span><br><span class="hljs-function">Node* <span class="hljs-title">mergeSortedLists</span><span class="hljs-params">(Node* list1, Node* list2)</span> </span>&#123;<br>    Node* mergedList = <span class="hljs-literal">nullptr</span>;<br>    Node* current = mergedList;<br><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">nullptr</span> &amp;&amp; list2 != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (list1-&gt;data &lt; list2-&gt;data) &#123;<br>            <span class="hljs-built_in">insertNodeAtEnd</span>(current, list1-&gt;data);<br>            list1 = list1-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">insertNodeAtEnd</span>(current, list2-&gt;data);<br>            list2 = list2-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mergedList == <span class="hljs-literal">nullptr</span>) &#123;<br>            mergedList = current;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理剩余的元素</span><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(current, list1-&gt;data);<br>        list1 = list1-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (list2 != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(current, list2-&gt;data);<br>        list2 = list2-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> mergedList;<br>&#125;<br><br><span class="hljs-comment">// 打印单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(Node* head)</span> </span>&#123;<br>    Node* current = head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">nullptr</span>) &#123;<br>        cout &lt;&lt; current-&gt;data &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span>;<br>        current = current-&gt;next;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;nullptr&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node* list1 = <span class="hljs-literal">nullptr</span>;<br>    Node* list2 = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-comment">// 建立单链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(list1, i * <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">insertNodeAtEnd</span>(list2, i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;List 1: &quot;</span>;<br>    <span class="hljs-built_in">printList</span>(list1);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;List 2: &quot;</span>;<br>    <span class="hljs-built_in">printList</span>(list2);<br><br>    <span class="hljs-comment">// 合并有序单链表</span><br>    Node* mergedList = <span class="hljs-built_in">mergeSortedLists</span>(list1, list2);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;Merged List: &quot;</span>;<br>    <span class="hljs-built_in">printList</span>(mergedList);<br><br>    <span class="hljs-comment">// 查找节点位置</span><br>    <span class="hljs-type">int</span> searchValue = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> position = <span class="hljs-built_in">findNodePosition</span>(mergedList, searchValue);<br>    <span class="hljs-keyword">if</span> (position != <span class="hljs-number">-1</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Found &quot;</span> &lt;&lt; searchValue &lt;&lt; <span class="hljs-string">&quot; at position &quot;</span> &lt;&lt; position &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; searchValue &lt;&lt; <span class="hljs-string">&quot; not found in the merged list.&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-type">int</span> deletePosition = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deleteNodeAtPosition</span>(mergedList, deletePosition)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Deleted node at position &quot;</span> &lt;&lt; deletePosition &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Updated List: &quot;</span>;<br>        <span class="hljs-built_in">printList</span>(mergedList);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Unable to delete node at position &quot;</span> &lt;&lt; deletePosition &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-keyword">while</span> (mergedList != <span class="hljs-literal">nullptr</span>) &#123;<br>        Node* temp = mergedList;<br>        mergedList = mergedList-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构实验</title>
    <link href="/2024/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/"/>
    <url>/2024/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="数据结构实验-test"><a href="#数据结构实验-test" class="headerlink" title="数据结构实验 test"></a>数据结构实验 test</h1><p>[TOC]</p></blockquote><h2 id="一、实验一"><a href="#一、实验一" class="headerlink" title="一、实验一"></a><a href="http://htmlpreview.github.io/?https://github.com/yanhuigang173/markdown-xtxi/blob/main/typora/uiyjyi.html">一、实验一</a></h2><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><ul><li><p>编程实现顺序表的以下基本操作：建立顺序表，修改顺序表，插入顺序表，删除顺序表。</p></li><li><p>采用顺序表结构编程实现：两个集合的运算：交集&#x2F;并集&#x2F;差集。</p></li></ul><h2 id="二、实验二"><a href="#二、实验二" class="headerlink" title="二、实验二"></a><a href="http://htmlpreview.github.io/?https://github.com/yanhuigang173/markdown-xtxi/blob/main/typora/uiyjer.html">二、实验二</a></h2><h3 id="链式表"><a href="#链式表" class="headerlink" title="链式表"></a>链式表</h3><ul><li><p>掌握线性表的链式存储结构；</p></li><li><p>掌握单链表及其基本操作的实现。</p></li></ul><h2 id="三、实验三"><a href="#三、实验三" class="headerlink" title="三、实验三"></a><a href="http://htmlpreview.github.io/?https://github.com/yanhuigang173/markdown-xtxi/blob/main/typora/uiyjsj.html">三、实验三</a></h2><ul><li>掌握栈的顺序存储结构、链式存储结构及其基本操作；</li><li>掌握队列的顺序存储结构、链式存储结构及其基本操作。</li></ul><h2 id="四、实验四"><a href="#四、实验四" class="headerlink" title="四、实验四"></a><a href="lmjp">四、实验四</a></h2><ul><li><p>掌握二叉树的二叉链表存储方式及二叉树的特征；</p></li><li><p>验证二叉树在二叉链表存储结构下遍历操作的实现；</p></li><li><p>掌握哈夫曼树的构造方法和哈夫曼编码的方法。</p></li></ul><h2 id="五、实验五"><a href="#五、实验五" class="headerlink" title="五、实验五"></a><a href="lmjp">五、实验五</a></h2><h3 id="图的操作（6学时）"><a href="#图的操作（6学时）" class="headerlink" title="图的操作（6学时）"></a>图的操作（6学时）</h3><ul><li><p>采用邻接矩阵&#x2F;邻接表建立图；</p></li><li><p>采用深度优先&#x2F;广度优先搜索方式遍历图；</p></li><li><p>编程实现Dijkstra最短路径算法。暂无</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验三</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h1><p>[TOC]</p></blockquote><h3 id="3-1栈的顺序存储结构"><a href="#3-1栈的顺序存储结构" class="headerlink" title="3.1栈的顺序存储结构"></a>3.1栈的顺序存储结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义顺序栈的最大大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 5</span><br><br><span class="hljs-comment">// 定义顺序栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> top;<br>&#125; SqStack;<br><br><span class="hljs-comment">// 初始化顺序栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span> </span>&#123;<br>    S.top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断顺序栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> S.top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断顺序栈是否已满</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(SqStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> S.top == MAXSIZE - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈已满，无法入栈。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    S.data[++S.top] = elem;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法出栈。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = S.data[S.top--];<br>    cout &lt;&lt; <span class="hljs-string">&quot;出栈元素：&quot;</span> &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot;，当前栈顶指针：&quot;</span> &lt;&lt; S.top &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取顺序栈栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法获取栈顶元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = S.data[S.top];<br>    cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取栈顶元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 顺序栈</span><br>    SqStack sqStack;<br>    <span class="hljs-built_in">InitStack</span>(sqStack);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitStack</span>(sqStack);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建栈成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">GetTop</span>(sqStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入栈的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入栈元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入栈结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Push</span>(sqStack, elem)) &#123;<br>                    cout&lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>                cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶指针：&quot;</span> &lt;&lt; sqStack.top &lt;&lt; endl;<br>         <br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-built_in">Pop</span>(sqStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2栈的链式存储"><a href="#3-2栈的链式存储" class="headerlink" title="3.2栈的链式存储"></a>3.2栈的链式存储</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class="hljs-comment">// 定义链式栈</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Node* top;<br>&#125; LinkedStack;<br><br><span class="hljs-comment">// 初始化链式栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(LinkedStack&amp; S)</span> </span>&#123;<br>    S.top = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断链式栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkedStack S)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> S.top == <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkedStack&amp; S, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-keyword">new</span> Node;<br>    newNode-&gt;data = elem;<br>    newNode-&gt;next = S.top;<br>    S.top = newNode;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkedStack&amp; S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法出栈。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    Node* temp = S.top;<br>    elem = temp-&gt;data;<br>    S.top = temp-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;出栈元素：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取链式栈栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(LinkedStack S, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈为空，无法获取栈顶元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = S.top-&gt;data;<br>    cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取栈顶元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 链式栈</span><br>    LinkedStack linkedStack;<br>    <span class="hljs-built_in">InitStack</span>(linkedStack);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitStack</span>(linkedStack);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建栈成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">GetTop</span>(linkedStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入栈的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入栈元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入栈结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Push</span>(linkedStack, elem)) &#123;<br>                    cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">Pop</span>(linkedStack, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3队列的链式存储"><a href="#3-3队列的链式存储" class="headerlink" title="3.3队列的链式存储"></a>3.3队列的链式存储</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义循环队列的最大大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 6</span><br><br><span class="hljs-comment">// 定义循环队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> front;<br>    <span class="hljs-type">int</span> rear;<br>&#125; CircularQueue;<br><br><span class="hljs-comment">// 初始化循环队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(CircularQueue&amp; Q)</span> </span>&#123;<br>    Q.front = Q.rear = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断循环队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(CircularQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == Q.rear;<br>&#125;<br><br><span class="hljs-comment">// 判断循环队列是否已满</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(CircularQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (Q.rear + <span class="hljs-number">1</span>) % MAXSIZE == Q.front;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(CircularQueue&amp; Q, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列已满，无法入队。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>   Q.data[Q.rear] = elem;<br>   Q.rear = (Q.rear + <span class="hljs-number">1</span>) % MAXSIZE; <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(CircularQueue&amp; Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法出队。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = Q.data[Q.front];<br>    Q.front = (Q.front + <span class="hljs-number">1</span>) % MAXSIZE;<br>   <br><br>    cout &lt;&lt; <span class="hljs-string">&quot;出队元素：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取队头元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(CircularQueue Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法获取队头元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = Q.data[Q.front];<br>    cout &lt;&lt; <span class="hljs-string">&quot;队头元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建队列&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取队头元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 循环队列</span><br>    CircularQueue circularQueue;<br>    <span class="hljs-built_in">InitQueue</span>(circularQueue);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;  <br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitQueue</span>(circularQueue);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建队列成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">GetFront</span>(circularQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入队的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入队元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入队结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Enqueue</span>(circularQueue, elem)) &#123;<br>                    cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">Dequeue</span>(circularQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4队列的链式存储"><a href="#3-4队列的链式存储" class="headerlink" title="3.4队列的链式存储"></a>3.4队列的链式存储</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;;<br><br><span class="hljs-comment">// 定义链式队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Node* front;<br>    Node* rear;<br>&#125; LinkedQueue;<br><br><span class="hljs-comment">// 初始化链式队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkedQueue&amp; Q)</span> </span>&#123;<br>    Q.front = Q.rear = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断链式队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkedQueue Q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Q.front == <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(LinkedQueue&amp; Q, <span class="hljs-type">int</span> elem)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-keyword">new</span> Node;<br>    newNode-&gt;data = elem;<br>    newNode-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        Q.front = Q.rear = newNode;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        Q.rear-&gt;next = newNode;<br>        Q.rear = newNode;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(LinkedQueue&amp; Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法出队。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    Node* temp = Q.front;<br>    elem = temp-&gt;data;<br><br>    Q.front = temp-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br><br>    <span class="hljs-keyword">if</span> (Q.front == <span class="hljs-literal">nullptr</span>) &#123;<br>        Q.rear = <span class="hljs-literal">nullptr</span>; <br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;出队元素：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取队头元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(LinkedQueue Q, <span class="hljs-type">int</span>&amp; elem)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(Q)) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队列为空，无法获取队头元素。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    elem = Q.front-&gt;data;<br>    cout &lt;&lt; <span class="hljs-string">&quot;队头元素为：&quot;</span> &lt;&lt; elem &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 显示菜单</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===============菜单===============&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 建队列&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 取队头元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;3. 入队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;4. 出队&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;5. 退出&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;===================================&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请选择操作：&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 链式队列</span><br>    LinkedQueue linkedQueue;<br>    <span class="hljs-built_in">InitQueue</span>(linkedQueue);<br><br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-type">int</span> elem;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">DisplayMenu</span>();<br>        cin &gt;&gt; choice;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">InitQueue</span>(linkedQueue);<br>            cout &lt;&lt; <span class="hljs-string">&quot;建队列成功。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">GetFront</span>(linkedQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入要入队的元素（以-1结束）：&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;入队元素：&quot;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                cin &gt;&gt; elem;<br><br>                <span class="hljs-keyword">if</span> (elem == <span class="hljs-number">-1</span>) &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;入队结束。&quot;</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Enqueue</span>(linkedQueue, elem)) &#123;<br>                    cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">Dequeue</span>(linkedQueue, elem);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;程序退出。&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            cout &lt;&lt; <span class="hljs-string">&quot;无效的选择，请重新输入。&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (choice != <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-实验四</title>
    <link href="/2024/02/05/%E5%AE%9E%E9%AA%8C%E5%9B%9B%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%888%E5%AD%A6%E6%97%B6%EF%BC%89/"/>
    <url>/2024/02/05/%E5%AE%9E%E9%AA%8C%E5%9B%9B%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%888%E5%AD%A6%E6%97%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="实验四-二叉树的操作"><a href="#实验四-二叉树的操作" class="headerlink" title="实验四 二叉树的操作"></a>实验四 二叉树的操作</h1><h1 id="（8学时）"><a href="#（8学时）" class="headerlink" title="（8学时）"></a>（8学时）</h1><ol><li><strong>实验性质</strong>：</li></ol><p>综合性实验</p><p>2．要求：</p><p>（1）掌握二叉树的二叉链表存储方式及二叉树的特征；</p><p>（2）验证二叉树在二叉链表存储结构下遍历操作的实现；</p><p>（3）掌握哈夫曼树的构造方法和哈夫曼编码的方法。</p><p>3.实验目的</p><p>通过该实验，可以熟练掌握二叉树的存储方式、遍历操作实现及构造赫夫曼树和哈夫曼编码的方法。</p><p>4.实验内容</p><p>（1）采用二叉链表结构建立二叉树；</p><p>（2）编程实现二叉树的先序、中序、后序和层序遍历；</p><p>（3）编程实现：求二叉树的高度和叶子结点个数；</p><p>（4）应用实现：哈夫曼编码。</p><p>5.验收&#x2F;测试用例</p><ul><li>构造二叉链表表示下列表达式(算法5.3)，红色十字为根节点</li></ul><blockquote><p>中序遍历 ：a-b*c&#x2F;(d+e*f)+g*(h+i)</p></blockquote><ul><li>实现上述二叉链表的先序、中序、后序遍历，输入相应的先序序列、中序序列、后序序列。</li></ul><p>例如： 输入</p><blockquote><p> +-a##*b##&#x2F;c##+d##*e##f##*g##+h##i##</p></blockquote><p>输出</p><p>“先序序列： +-a*b&#x2F;c+d*ef*g+hi”</p><ul><li><p>编程实现，输出上述二叉树的高度和叶子结点个数；</p></li><li><p>设有正文AADBAACACCDACACAADBBCD，编程统计字符集A,B,C,D的出现,次数。设计一套Huffman编码，使得上述正文的编码最短，并且计算它的带权路径长度。</p><p>A(9次）B（3次）C（6次）D（4次）</p><h3 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h3></li></ul><pre><code class=" mermaid">graph TD    plus(&quot;+&quot;) --&gt; minus(&quot;-&quot;)    minus --&gt; a(&quot;a&quot;)    minus --&gt; multiply(&quot;*&quot;)    multiply --&gt; b(&quot;b&quot;)    multiply --&gt; divide(&quot;/&quot;)    divide --&gt; c(&quot;c&quot;)    plus --&gt; multiply2(&quot;*&quot;)    multiply2 --&gt; g(&quot;g&quot;)    multiply2 --&gt; plus2(&quot;+&quot;)    plus2 --&gt; h(&quot;h&quot;)    plus2 --&gt; i(&quot;i&quot;)    divide --&gt; plus3(&quot;+&quot;)    plus3 --&gt; d(&quot;d&quot;)    plus3 --&gt; multiply3(&quot;*&quot;)    multiply3 --&gt; e(&quot;e&quot;)    multiply3 --&gt; f(&quot;f&quot;)</code></pre><h3 id="哈夫曼树结构"><a href="#哈夫曼树结构" class="headerlink" title="哈夫曼树结构"></a>哈夫曼树结构</h3><pre><code class=" mermaid">graph TD  22((&quot;22&quot;)) --&gt;|0| A((&quot;A&quot;))  22((&quot;22&quot;)) ---&gt;|1| 13((&quot;13&quot;))  13 --&gt;|0| C((&quot;C&quot;))  13 ---&gt;|1| 7((&quot;7&quot;))  7 --&gt;|0| B((&quot;B&quot;))  7 ---&gt;|1| D((&quot;D&quot;))</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
